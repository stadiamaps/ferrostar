// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

// swiftlint:disable all
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(ferrostarFFI)
import ferrostarFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func empty() -> RustBuffer {
        RustBuffer(capacity: 0, len:0, data: nil)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_ferrostar_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_ferrostar_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        self.init(
            bytesNoCopy: rustBuffer.data!,
            count: Int(rustBuffer.len),
            deallocator: .none
        )
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous to the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_UNEXPECTED_ERROR: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    let neverThrow: ((RustBuffer) throws -> Never)? = nil
    return try makeRustCall(callback, errorHandler: neverThrow)
}

private func rustCallWithError<T, E: Swift.Error>(
    _ errorHandler: @escaping (RustBuffer) throws -> E,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T, E: Swift.Error>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> E)?
) throws -> T {
    uniffiEnsureFerrostarInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus<E: Swift.Error>(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> E)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_UNEXPECTED_ERROR:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

private func uniffiTraitInterfaceCall<T>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> ()
) {
    do {
        try writeReturn(makeCall())
    } catch let error {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}

private func uniffiTraitInterfaceCallWithError<T, E>(
    callStatus: UnsafeMutablePointer<RustCallStatus>,
    makeCall: () throws -> T,
    writeReturn: (T) -> (),
    lowerError: (E) -> RustBuffer
) {
    do {
        try writeReturn(makeCall())
    } catch let error as E {
        callStatus.pointee.code = CALL_ERROR
        callStatus.pointee.errorBuf = lowerError(error)
    } catch {
        callStatus.pointee.code = CALL_UNEXPECTED_ERROR
        callStatus.pointee.errorBuf = FfiConverterString.lower(String(describing: error))
    }
}
fileprivate final class UniffiHandleMap<T>: @unchecked Sendable {
    // All mutation happens with this lock held, which is why we implement @unchecked Sendable.
    private let lock = NSLock()
    private var map: [UInt64: T] = [:]
    private var currentHandle: UInt64 = 1

    func insert(obj: T) -> UInt64 {
        lock.withLock {
            let handle = currentHandle
            currentHandle += 1
            map[handle] = obj
            return handle
        }
    }

     func get(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map[handle] else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    @discardableResult
    func remove(handle: UInt64) throws -> T {
        try lock.withLock {
            guard let obj = map.removeValue(forKey: handle) else {
                throw UniffiInternalError.unexpectedStaleHandle
            }
            return obj
        }
    }

    var count: Int {
        get {
            map.count
        }
    }
}


// Public interface members begin here.
// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterInt64: FfiConverterPrimitive {
    typealias FfiType = Int64
    typealias SwiftType = Int64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Int64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Int64, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterData: FfiConverterRustBuffer {
    typealias SwiftType = Data

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Data {
        let len: Int32 = try readInt(&buf)
        return Data(try readBytes(&buf, count: Int(len)))
    }

    public static func write(_ value: Data, into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        writeBytes(&buf, value)
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterTimestamp: FfiConverterRustBuffer {
    typealias SwiftType = Date

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Date {
        let seconds: Int64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        if seconds >= 0 {
            let delta = Double(seconds) + (Double(nanoseconds) / 1.0e9)
            return Date.init(timeIntervalSince1970: delta)
        } else {
            let delta = Double(seconds) - (Double(nanoseconds) / 1.0e9)
            return Date.init(timeIntervalSince1970: delta)
        }
    }

    public static func write(_ value: Date, into buf: inout [UInt8]) {
        var delta = value.timeIntervalSince1970
        var sign: Int64 = 1
        if delta < 0 {
            // The nanoseconds portion of the epoch offset must always be
            // positive, to simplify the calculation we will use the absolute
            // value of the offset.
            sign = -1
            delta = -delta
        }
        if delta.rounded(.down) > Double(Int64.max) {
            fatalError("Timestamp overflow, exceeds max bounds supported by Uniffi")
        }
        let seconds = Int64(delta)
        let nanoseconds = UInt32((delta - Double(seconds)) * 1.0e9)
        writeInt(&buf, sign * seconds)
        writeInt(&buf, nanoseconds)
    }
}




/**
 * Advance if all of the conditions are met (AND).
 */
public protocol AndAdvanceConditionsProtocol: AnyObject, Sendable {
    
}
/**
 * Advance if all of the conditions are met (AND).
 */
open class AndAdvanceConditions: AndAdvanceConditionsProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_andadvanceconditions(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_andadvanceconditions(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeAndAdvanceConditions: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = AndAdvanceConditions

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> AndAdvanceConditions {
        return AndAdvanceConditions(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: AndAdvanceConditions) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AndAdvanceConditions {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: AndAdvanceConditions, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAndAdvanceConditions_lift(_ pointer: UnsafeMutableRawPointer) throws -> AndAdvanceConditions {
    return try FfiConverterTypeAndAdvanceConditions.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeAndAdvanceConditions_lower(_ value: AndAdvanceConditions) -> UnsafeMutableRawPointer {
    return FfiConverterTypeAndAdvanceConditions.lower(value)
}






/**
 * A stateful condition that requires the user to reach the end of the step then proceed past it to advance.
 */
public protocol DistanceEntryAndExitConditionProtocol: AnyObject, Sendable {
    
}
/**
 * A stateful condition that requires the user to reach the end of the step then proceed past it to advance.
 */
open class DistanceEntryAndExitCondition: DistanceEntryAndExitConditionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_distanceentryandexitcondition(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_distanceentryandexitcondition(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDistanceEntryAndExitCondition: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DistanceEntryAndExitCondition

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DistanceEntryAndExitCondition {
        return DistanceEntryAndExitCondition(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DistanceEntryAndExitCondition) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DistanceEntryAndExitCondition {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DistanceEntryAndExitCondition, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDistanceEntryAndExitCondition_lift(_ pointer: UnsafeMutableRawPointer) throws -> DistanceEntryAndExitCondition {
    return try FfiConverterTypeDistanceEntryAndExitCondition.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDistanceEntryAndExitCondition_lower(_ value: DistanceEntryAndExitCondition) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDistanceEntryAndExitCondition.lower(value)
}






/**
 * Requires that the user be at least this far from the current route step.
 *
 * This results in *delayed* advance,
 * but is more robust to spurious / unwanted step changes in scenarios including
 * self-intersecting routes (sudden jump to the next step)
 * and pauses at intersections (advancing too soon before the maneuver is complete).
 *
 * NOTE! This may be less robust to things like short steps, out and backs and U-turns,
 * where this may eagerly exit a current step before the user has traversed it if the start
 * the step within range of the end.
 */
public protocol DistanceFromStepConditionProtocol: AnyObject, Sendable {
    
}
/**
 * Requires that the user be at least this far from the current route step.
 *
 * This results in *delayed* advance,
 * but is more robust to spurious / unwanted step changes in scenarios including
 * self-intersecting routes (sudden jump to the next step)
 * and pauses at intersections (advancing too soon before the maneuver is complete).
 *
 * NOTE! This may be less robust to things like short steps, out and backs and U-turns,
 * where this may eagerly exit a current step before the user has traversed it if the start
 * the step within range of the end.
 */
open class DistanceFromStepCondition: DistanceFromStepConditionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_distancefromstepcondition(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_distancefromstepcondition(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDistanceFromStepCondition: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DistanceFromStepCondition

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DistanceFromStepCondition {
        return DistanceFromStepCondition(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DistanceFromStepCondition) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DistanceFromStepCondition {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DistanceFromStepCondition, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDistanceFromStepCondition_lift(_ pointer: UnsafeMutableRawPointer) throws -> DistanceFromStepCondition {
    return try FfiConverterTypeDistanceFromStepCondition.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDistanceFromStepCondition_lower(_ value: DistanceFromStepCondition) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDistanceFromStepCondition.lower(value)
}






/**
 * Automatically advances when the user's location is close enough to the end of the step.
 *
 * This results in an eager advance where the user will jump to the next step when the
 * condition is met.
 */
public protocol DistanceToEndOfStepConditionProtocol: AnyObject, Sendable {
    
}
/**
 * Automatically advances when the user's location is close enough to the end of the step.
 *
 * This results in an eager advance where the user will jump to the next step when the
 * condition is met.
 */
open class DistanceToEndOfStepCondition: DistanceToEndOfStepConditionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_distancetoendofstepcondition(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_distancetoendofstepcondition(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeDistanceToEndOfStepCondition: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = DistanceToEndOfStepCondition

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> DistanceToEndOfStepCondition {
        return DistanceToEndOfStepCondition(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: DistanceToEndOfStepCondition) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DistanceToEndOfStepCondition {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: DistanceToEndOfStepCondition, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDistanceToEndOfStepCondition_lift(_ pointer: UnsafeMutableRawPointer) throws -> DistanceToEndOfStepCondition {
    return try FfiConverterTypeDistanceToEndOfStepCondition.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeDistanceToEndOfStepCondition_lower(_ value: DistanceToEndOfStepCondition) -> UnsafeMutableRawPointer {
    return FfiConverterTypeDistanceToEndOfStepCondition.lower(value)
}






/**
 * Never advances to the next step automatically;
 * requires calling [`NavigationController::advance_to_next_step`](super::NavigationController::advance_to_next_step).
 *
 * You can use this to implement custom behaviors in external code.
 */
public protocol ManualStepConditionProtocol: AnyObject, Sendable {
    
}
/**
 * Never advances to the next step automatically;
 * requires calling [`NavigationController::advance_to_next_step`](super::NavigationController::advance_to_next_step).
 *
 * You can use this to implement custom behaviors in external code.
 */
open class ManualStepCondition: ManualStepConditionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_manualstepcondition(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_manualstepcondition(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeManualStepCondition: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ManualStepCondition

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ManualStepCondition {
        return ManualStepCondition(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ManualStepCondition) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ManualStepCondition {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ManualStepCondition, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeManualStepCondition_lift(_ pointer: UnsafeMutableRawPointer) throws -> ManualStepCondition {
    return try FfiConverterTypeManualStepCondition.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeManualStepCondition_lower(_ value: ManualStepCondition) -> UnsafeMutableRawPointer {
    return FfiConverterTypeManualStepCondition.lower(value)
}






/**
 * Manages the navigation lifecycle through a route,
 * returning an updated state given inputs like user location.
 *
 * Notes for implementing a new platform:
 * - A controller is bound to a single route; if you want recalculation, create a new instance.
 * - This is a pure type (no interior mutability), so a core function of your platform code is responsibly managing mutable state.
 */
public protocol NavigationControllerProtocol: AnyObject, Sendable {
    
}
/**
 * Manages the navigation lifecycle through a route,
 * returning an updated state given inputs like user location.
 *
 * Notes for implementing a new platform:
 * - A controller is bound to a single route; if you want recalculation, create a new instance.
 * - This is a pure type (no interior mutability), so a core function of your platform code is responsibly managing mutable state.
 */
open class NavigationController: NavigationControllerProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_navigationcontroller(self.pointer, $0) }
    }
    /**
     * Create a navigation controller for a route and configuration.
     */
public convenience init(route: Route, config: NavigationControllerConfig) {
    let pointer =
        try! rustCall() {
    uniffi_ferrostar_fn_constructor_navigationcontroller_new(
        FfiConverterTypeRoute_lower(route),
        FfiConverterTypeNavigationControllerConfig_lower(config),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_navigationcontroller(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNavigationController: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NavigationController

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NavigationController {
        return NavigationController(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NavigationController) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NavigationController {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NavigationController, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNavigationController_lift(_ pointer: UnsafeMutableRawPointer) throws -> NavigationController {
    return try FfiConverterTypeNavigationController.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNavigationController_lower(_ value: NavigationController) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNavigationController.lower(value)
}






/**
 * Core interface for navigation functionalities.
 *
 * This trait defines the essential operations for a navigation state manager.
 * This lets us build additional layers (e.g. event logging)
 * around [`NavigationController`] in a composable manner.
 */
public protocol NavigatorProtocol: AnyObject, Sendable {
    
    func getInitialState(location: UserLocation)  -> NavState
    
    func advanceToNextStep(state: NavState)  -> NavState
    
    func updateUserLocation(location: UserLocation, state: NavState)  -> NavState
    
}
/**
 * Core interface for navigation functionalities.
 *
 * This trait defines the essential operations for a navigation state manager.
 * This lets us build additional layers (e.g. event logging)
 * around [`NavigationController`] in a composable manner.
 */
open class Navigator: NavigatorProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_navigator(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_navigator(pointer, $0) }
    }

    

    
open func getInitialState(location: UserLocation) -> NavState  {
    return try!  FfiConverterTypeNavState_lift(try! rustCall() {
    uniffi_ferrostar_fn_method_navigator_get_initial_state(self.uniffiClonePointer(),
        FfiConverterTypeUserLocation_lower(location),$0
    )
})
}
    
open func advanceToNextStep(state: NavState) -> NavState  {
    return try!  FfiConverterTypeNavState_lift(try! rustCall() {
    uniffi_ferrostar_fn_method_navigator_advance_to_next_step(self.uniffiClonePointer(),
        FfiConverterTypeNavState_lower(state),$0
    )
})
}
    
open func updateUserLocation(location: UserLocation, state: NavState) -> NavState  {
    return try!  FfiConverterTypeNavState_lift(try! rustCall() {
    uniffi_ferrostar_fn_method_navigator_update_user_location(self.uniffiClonePointer(),
        FfiConverterTypeUserLocation_lower(location),
        FfiConverterTypeNavState_lower(state),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNavigator: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Navigator

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Navigator {
        return Navigator(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Navigator) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Navigator {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Navigator, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNavigator_lift(_ pointer: UnsafeMutableRawPointer) throws -> Navigator {
    return try FfiConverterTypeNavigator.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNavigator_lower(_ value: Navigator) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNavigator.lower(value)
}






/**
 * Advance if any of the conditions are met (OR).
 *
 * This is ideal for short circuit type advance conditions.
 *
 * E.g. you may have:
 * 1. A short circuit detecting if the user has exceeded a large distance from the current step.
 * 2. A default advance behavior.
 */
public protocol OrAdvanceConditionsProtocol: AnyObject, Sendable {
    
}
/**
 * Advance if any of the conditions are met (OR).
 *
 * This is ideal for short circuit type advance conditions.
 *
 * E.g. you may have:
 * 1. A short circuit detecting if the user has exceeded a large distance from the current step.
 * 2. A default advance behavior.
 */
open class OrAdvanceConditions: OrAdvanceConditionsProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_oradvanceconditions(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_oradvanceconditions(pointer, $0) }
    }

    

    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeOrAdvanceConditions: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = OrAdvanceConditions

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> OrAdvanceConditions {
        return OrAdvanceConditions(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: OrAdvanceConditions) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OrAdvanceConditions {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: OrAdvanceConditions, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOrAdvanceConditions_lift(_ pointer: UnsafeMutableRawPointer) throws -> OrAdvanceConditions {
    return try FfiConverterTypeOrAdvanceConditions.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeOrAdvanceConditions_lower(_ value: OrAdvanceConditions) -> UnsafeMutableRawPointer {
    return FfiConverterTypeOrAdvanceConditions.lower(value)
}






/**
 * The route adapter bridges between the common core and a routing backend where interaction takes place
 * over a generic request/response flow (typically over a network;
 * local/offline routers **do not use this object** as the interaction patterns are different).
 *
 * This is essentially the composite of the [`RouteRequestGenerator`] and [`RouteResponseParser`]
 * traits, but it provides one further level of abstraction which is helpful to consumers.
 * As there is no way to signal compatibility between request generators and response parsers,
 * the [`RouteAdapter`] provides convenience constructors which take the guesswork out of it,
 * while still leaving consumers free to implement one or both halves.
 *
 * In the future, we may provide additional methods or conveniences, and this
 * indirection leaves the design open to such changes without necessarily breaking source
 * compatibility.
 * One such possible extension would be the ability to fetch more detailed attributes in real time.
 * This is supported by the Valhalla stack, among others.
 *
 * Ideas  welcome re: how to signal compatibility between request generators and response parsers.
 * I don't think we can do this in the type system, since one of the reasons for the split design
 * is modularity, including the possibility of user-provided implementations, and these will not
 * always be of a "known" type to the Rust side.
 */
public protocol RouteAdapterProtocol: AnyObject, Sendable {
    
    func generateRequest(userLocation: UserLocation, waypoints: [Waypoint]) throws  -> RouteRequest
    
    func parseResponse(response: Data) throws  -> [Route]
    
}
/**
 * The route adapter bridges between the common core and a routing backend where interaction takes place
 * over a generic request/response flow (typically over a network;
 * local/offline routers **do not use this object** as the interaction patterns are different).
 *
 * This is essentially the composite of the [`RouteRequestGenerator`] and [`RouteResponseParser`]
 * traits, but it provides one further level of abstraction which is helpful to consumers.
 * As there is no way to signal compatibility between request generators and response parsers,
 * the [`RouteAdapter`] provides convenience constructors which take the guesswork out of it,
 * while still leaving consumers free to implement one or both halves.
 *
 * In the future, we may provide additional methods or conveniences, and this
 * indirection leaves the design open to such changes without necessarily breaking source
 * compatibility.
 * One such possible extension would be the ability to fetch more detailed attributes in real time.
 * This is supported by the Valhalla stack, among others.
 *
 * Ideas  welcome re: how to signal compatibility between request generators and response parsers.
 * I don't think we can do this in the type system, since one of the reasons for the split design
 * is modularity, including the possibility of user-provided implementations, and these will not
 * always be of a "known" type to the Rust side.
 */
open class RouteAdapter: RouteAdapterProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_routeadapter(self.pointer, $0) }
    }
public convenience init(requestGenerator: RouteRequestGenerator, responseParser: RouteResponseParser) {
    let pointer =
        try! rustCall() {
    uniffi_ferrostar_fn_constructor_routeadapter_new(
        FfiConverterTypeRouteRequestGenerator_lower(requestGenerator),
        FfiConverterTypeRouteResponseParser_lower(responseParser),$0
    )
}
    self.init(unsafeFromRawPointer: pointer)
}

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_routeadapter(pointer, $0) }
    }

    
public static func newValhallaHttp(endpointUrl: String, profile: String, optionsJson: String?)throws  -> RouteAdapter  {
    return try  FfiConverterTypeRouteAdapter_lift(try rustCallWithError(FfiConverterTypeInstantiationError_lift) {
    uniffi_ferrostar_fn_constructor_routeadapter_new_valhalla_http(
        FfiConverterString.lower(endpointUrl),
        FfiConverterString.lower(profile),
        FfiConverterOptionString.lower(optionsJson),$0
    )
})
}
    

    
open func generateRequest(userLocation: UserLocation, waypoints: [Waypoint])throws  -> RouteRequest  {
    return try  FfiConverterTypeRouteRequest_lift(try rustCallWithError(FfiConverterTypeRoutingRequestGenerationError_lift) {
    uniffi_ferrostar_fn_method_routeadapter_generate_request(self.uniffiClonePointer(),
        FfiConverterTypeUserLocation_lower(userLocation),
        FfiConverterSequenceTypeWaypoint.lower(waypoints),$0
    )
})
}
    
open func parseResponse(response: Data)throws  -> [Route]  {
    return try  FfiConverterSequenceTypeRoute.lift(try rustCallWithError(FfiConverterTypeParsingError_lift) {
    uniffi_ferrostar_fn_method_routeadapter_parse_response(self.uniffiClonePointer(),
        FfiConverterData.lower(response),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteAdapter: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RouteAdapter

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteAdapter {
        return RouteAdapter(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RouteAdapter) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteAdapter {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RouteAdapter, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteAdapter_lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteAdapter {
    return try FfiConverterTypeRouteAdapter.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteAdapter_lower(_ value: RouteAdapter) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRouteAdapter.lower(value)
}






/**
 * A custom deviation detector (for extending the behavior of [`RouteDeviationTracking`]).
 *
 * This allows for arbitrarily complex implementations when the provided ones are not enough.
 * For example, detecting that the user is proceeding the wrong direction by keeping a ring buffer
 * of recent locations, or perform local map matching.
 */
public protocol RouteDeviationDetector: AnyObject, Sendable {
    
    /**
     * Determines whether the user is following the route correctly or not.
     *
     * NOTE: This function has a single responsibility.
     * Side-effects like whether to recalculate a route are left to higher levels,
     * and implementations should only be concerned with determining the facts.
     */
    func checkRouteDeviation(location: UserLocation, route: Route, currentRouteStep: RouteStep)  -> RouteDeviation
    
}
/**
 * A custom deviation detector (for extending the behavior of [`RouteDeviationTracking`]).
 *
 * This allows for arbitrarily complex implementations when the provided ones are not enough.
 * For example, detecting that the user is proceeding the wrong direction by keeping a ring buffer
 * of recent locations, or perform local map matching.
 */
open class RouteDeviationDetectorImpl: RouteDeviationDetector, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_routedeviationdetector(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_routedeviationdetector(pointer, $0) }
    }

    

    
    /**
     * Determines whether the user is following the route correctly or not.
     *
     * NOTE: This function has a single responsibility.
     * Side-effects like whether to recalculate a route are left to higher levels,
     * and implementations should only be concerned with determining the facts.
     */
open func checkRouteDeviation(location: UserLocation, route: Route, currentRouteStep: RouteStep) -> RouteDeviation  {
    return try!  FfiConverterTypeRouteDeviation_lift(try! rustCall() {
    uniffi_ferrostar_fn_method_routedeviationdetector_check_route_deviation(self.uniffiClonePointer(),
        FfiConverterTypeUserLocation_lower(location),
        FfiConverterTypeRoute_lower(route),
        FfiConverterTypeRouteStep_lower(currentRouteStep),$0
    )
})
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceRouteDeviationDetector {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceRouteDeviationDetector] = [UniffiVTableCallbackInterfaceRouteDeviationDetector(
        checkRouteDeviation: { (
            uniffiHandle: UInt64,
            location: RustBuffer,
            route: RustBuffer,
            currentRouteStep: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> RouteDeviation in
                guard let uniffiObj = try? FfiConverterTypeRouteDeviationDetector.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return uniffiObj.checkRouteDeviation(
                     location: try FfiConverterTypeUserLocation_lift(location),
                     route: try FfiConverterTypeRoute_lift(route),
                     currentRouteStep: try FfiConverterTypeRouteStep_lift(currentRouteStep)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterTypeRouteDeviation_lower($0) }
            uniffiTraitInterfaceCall(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeRouteDeviationDetector.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface RouteDeviationDetector: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitRouteDeviationDetector() {
    uniffi_ferrostar_fn_init_callback_vtable_routedeviationdetector(UniffiCallbackInterfaceRouteDeviationDetector.vtable)
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteDeviationDetector: FfiConverter {
    fileprivate static let handleMap = UniffiHandleMap<RouteDeviationDetector>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RouteDeviationDetector

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteDeviationDetector {
        return RouteDeviationDetectorImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RouteDeviationDetector) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteDeviationDetector {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RouteDeviationDetector, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteDeviationDetector_lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteDeviationDetector {
    return try FfiConverterTypeRouteDeviationDetector.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteDeviationDetector_lower(_ value: RouteDeviationDetector) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRouteDeviationDetector.lower(value)
}






/**
 * A trait describing any object capable of generating [`RouteRequest`]s.
 *
 * The interface is intentionally generic. Every routing backend has its own set of
 * parameters, including a "profile," max travel speed, units of speed and distance, and more.
 * It is assumed that these properties will be set at construction time or otherwise configured
 * before use, so that we can keep the public interface as generic as possible.
 *
 * Implementations may be either in Rust (most popular engines should eventually have Rust
 * glue code) or foreign code.
 */
public protocol RouteRequestGenerator: AnyObject, Sendable {
    
    /**
     * Generates a routing backend request given the set of locations.
     *
     * While most implementations will treat the locations as an ordered sequence, this is not
     * guaranteed (ex: an optimized router).
     */
    func generateRequest(userLocation: UserLocation, waypoints: [Waypoint]) throws  -> RouteRequest
    
}
/**
 * A trait describing any object capable of generating [`RouteRequest`]s.
 *
 * The interface is intentionally generic. Every routing backend has its own set of
 * parameters, including a "profile," max travel speed, units of speed and distance, and more.
 * It is assumed that these properties will be set at construction time or otherwise configured
 * before use, so that we can keep the public interface as generic as possible.
 *
 * Implementations may be either in Rust (most popular engines should eventually have Rust
 * glue code) or foreign code.
 */
open class RouteRequestGeneratorImpl: RouteRequestGenerator, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_routerequestgenerator(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_routerequestgenerator(pointer, $0) }
    }

    

    
    /**
     * Generates a routing backend request given the set of locations.
     *
     * While most implementations will treat the locations as an ordered sequence, this is not
     * guaranteed (ex: an optimized router).
     */
open func generateRequest(userLocation: UserLocation, waypoints: [Waypoint])throws  -> RouteRequest  {
    return try  FfiConverterTypeRouteRequest_lift(try rustCallWithError(FfiConverterTypeRoutingRequestGenerationError_lift) {
    uniffi_ferrostar_fn_method_routerequestgenerator_generate_request(self.uniffiClonePointer(),
        FfiConverterTypeUserLocation_lower(userLocation),
        FfiConverterSequenceTypeWaypoint.lower(waypoints),$0
    )
})
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceRouteRequestGenerator {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceRouteRequestGenerator] = [UniffiVTableCallbackInterfaceRouteRequestGenerator(
        generateRequest: { (
            uniffiHandle: UInt64,
            userLocation: RustBuffer,
            waypoints: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> RouteRequest in
                guard let uniffiObj = try? FfiConverterTypeRouteRequestGenerator.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.generateRequest(
                     userLocation: try FfiConverterTypeUserLocation_lift(userLocation),
                     waypoints: try FfiConverterSequenceTypeWaypoint.lift(waypoints)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterTypeRouteRequest_lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeRoutingRequestGenerationError_lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeRouteRequestGenerator.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface RouteRequestGenerator: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitRouteRequestGenerator() {
    uniffi_ferrostar_fn_init_callback_vtable_routerequestgenerator(UniffiCallbackInterfaceRouteRequestGenerator.vtable)
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteRequestGenerator: FfiConverter {
    fileprivate static let handleMap = UniffiHandleMap<RouteRequestGenerator>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RouteRequestGenerator

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteRequestGenerator {
        return RouteRequestGeneratorImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RouteRequestGenerator) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteRequestGenerator {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RouteRequestGenerator, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteRequestGenerator_lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteRequestGenerator {
    return try FfiConverterTypeRouteRequestGenerator.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteRequestGenerator_lower(_ value: RouteRequestGenerator) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRouteRequestGenerator.lower(value)
}






/**
 * A generic interface describing any object capable of parsing a response from a routing
 * backend into one or more [`Route`]s.
 */
public protocol RouteResponseParser: AnyObject, Sendable {
    
    /**
     * Parses a raw response from the routing backend into a route.
     *
     * We use a sequence of octets as a common interchange format.
     * as this works for all currently conceivable formats (JSON, PBF, etc.).
     */
    func parseResponse(response: Data) throws  -> [Route]
    
}
/**
 * A generic interface describing any object capable of parsing a response from a routing
 * backend into one or more [`Route`]s.
 */
open class RouteResponseParserImpl: RouteResponseParser, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_routeresponseparser(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_routeresponseparser(pointer, $0) }
    }

    

    
    /**
     * Parses a raw response from the routing backend into a route.
     *
     * We use a sequence of octets as a common interchange format.
     * as this works for all currently conceivable formats (JSON, PBF, etc.).
     */
open func parseResponse(response: Data)throws  -> [Route]  {
    return try  FfiConverterSequenceTypeRoute.lift(try rustCallWithError(FfiConverterTypeParsingError_lift) {
    uniffi_ferrostar_fn_method_routeresponseparser_parse_response(self.uniffiClonePointer(),
        FfiConverterData.lower(response),$0
    )
})
}
    

}


// Put the implementation in a struct so we don't pollute the top-level namespace
fileprivate struct UniffiCallbackInterfaceRouteResponseParser {

    // Create the VTable using a series of closures.
    // Swift automatically converts these into C callback functions.
    //
    // This creates 1-element array, since this seems to be the only way to construct a const
    // pointer that we can pass to the Rust code.
    static let vtable: [UniffiVTableCallbackInterfaceRouteResponseParser] = [UniffiVTableCallbackInterfaceRouteResponseParser(
        parseResponse: { (
            uniffiHandle: UInt64,
            response: RustBuffer,
            uniffiOutReturn: UnsafeMutablePointer<RustBuffer>,
            uniffiCallStatus: UnsafeMutablePointer<RustCallStatus>
        ) in
            let makeCall = {
                () throws -> [Route] in
                guard let uniffiObj = try? FfiConverterTypeRouteResponseParser.handleMap.get(handle: uniffiHandle) else {
                    throw UniffiInternalError.unexpectedStaleHandle
                }
                return try uniffiObj.parseResponse(
                     response: try FfiConverterData.lift(response)
                )
            }

            
            let writeReturn = { uniffiOutReturn.pointee = FfiConverterSequenceTypeRoute.lower($0) }
            uniffiTraitInterfaceCallWithError(
                callStatus: uniffiCallStatus,
                makeCall: makeCall,
                writeReturn: writeReturn,
                lowerError: FfiConverterTypeParsingError_lower
            )
        },
        uniffiFree: { (uniffiHandle: UInt64) -> () in
            let result = try? FfiConverterTypeRouteResponseParser.handleMap.remove(handle: uniffiHandle)
            if result == nil {
                print("Uniffi callback interface RouteResponseParser: handle missing in uniffiFree")
            }
        }
    )]
}

private func uniffiCallbackInitRouteResponseParser() {
    uniffi_ferrostar_fn_init_callback_vtable_routeresponseparser(UniffiCallbackInterfaceRouteResponseParser.vtable)
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteResponseParser: FfiConverter {
    fileprivate static let handleMap = UniffiHandleMap<RouteResponseParser>()

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RouteResponseParser

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteResponseParser {
        return RouteResponseParserImpl(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RouteResponseParser) -> UnsafeMutableRawPointer {
        guard let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: handleMap.insert(obj: value))) else {
            fatalError("Cast to UnsafeMutableRawPointer failed")
        }
        return ptr
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteResponseParser {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RouteResponseParser, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteResponseParser_lift(_ pointer: UnsafeMutableRawPointer) throws -> RouteResponseParser {
    return try FfiConverterTypeRouteResponseParser.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteResponseParser_lower(_ value: RouteResponseParser) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRouteResponseParser.lower(value)
}






/**
 * When implementing custom step advance logic, this trait allows you to define
 * whether the condition should advance to the next condition, the next step or not.
 *
 * At the moment, these must be implemented in Rust.
 */
public protocol StepAdvanceConditionProtocol: AnyObject, Sendable {
    
    /**
     * This callback method is used by a step advance condition to receive step updates.
     * The step advance condition can choose based on its outcome and internal state
     * whether to advance to the next step or not.
     */
    func shouldAdvanceStep(userLocation: UserLocation, currentStep: RouteStep, nextStep: RouteStep?)  -> StepAdvanceResult
    
}
/**
 * When implementing custom step advance logic, this trait allows you to define
 * whether the condition should advance to the next condition, the next step or not.
 *
 * At the moment, these must be implemented in Rust.
 */
open class StepAdvanceCondition: StepAdvanceConditionProtocol, @unchecked Sendable {
    fileprivate let pointer: UnsafeMutableRawPointer!

    /// Used to instantiate a [FFIObject] without an actual pointer, for fakes in tests, mostly.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public struct NoPointer {
        public init() {}
    }

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    required public init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    // This constructor can be used to instantiate a fake object.
    // - Parameter noPointer: Placeholder value so we can have a constructor separate from the default empty one that may be implemented for classes extending [FFIObject].
    //
    // - Warning:
    //     Any object instantiated with this constructor cannot be passed to an actual Rust-backed object. Since there isn't a backing [Pointer] the FFI lower functions will crash.
#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public init(noPointer: NoPointer) {
        self.pointer = nil
    }

#if swift(>=5.8)
    @_documentation(visibility: private)
#endif
    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_ferrostar_fn_clone_stepadvancecondition(self.pointer, $0) }
    }
    // No primary constructor declared for this class.

    deinit {
        guard let pointer = pointer else {
            return
        }

        try! rustCall { uniffi_ferrostar_fn_free_stepadvancecondition(pointer, $0) }
    }

    

    
    /**
     * This callback method is used by a step advance condition to receive step updates.
     * The step advance condition can choose based on its outcome and internal state
     * whether to advance to the next step or not.
     */
open func shouldAdvanceStep(userLocation: UserLocation, currentStep: RouteStep, nextStep: RouteStep?) -> StepAdvanceResult  {
    return try!  FfiConverterTypeStepAdvanceResult_lift(try! rustCall() {
    uniffi_ferrostar_fn_method_stepadvancecondition_should_advance_step(self.uniffiClonePointer(),
        FfiConverterTypeUserLocation_lower(userLocation),
        FfiConverterTypeRouteStep_lower(currentStep),
        FfiConverterOptionTypeRouteStep.lower(nextStep),$0
    )
})
}
    

}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStepAdvanceCondition: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = StepAdvanceCondition

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> StepAdvanceCondition {
        return StepAdvanceCondition(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: StepAdvanceCondition) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StepAdvanceCondition {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: StepAdvanceCondition, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStepAdvanceCondition_lift(_ pointer: UnsafeMutableRawPointer) throws -> StepAdvanceCondition {
    return try FfiConverterTypeStepAdvanceCondition.lift(pointer)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStepAdvanceCondition_lower(_ value: StepAdvanceCondition) -> UnsafeMutableRawPointer {
    return FfiConverterTypeStepAdvanceCondition.lower(value)
}




/**
 * A geographic bounding box defined by its corners.
 */
public struct BoundingBox {
    /**
     * The southwest corner of the bounding box.
     */
    public var sw: GeographicCoordinate
    /**
     * The northeast corner of the bounding box.
     */
    public var ne: GeographicCoordinate

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The southwest corner of the bounding box.
         */sw: GeographicCoordinate, 
        /**
         * The northeast corner of the bounding box.
         */ne: GeographicCoordinate) {
        self.sw = sw
        self.ne = ne
    }
}

#if compiler(>=6)
extension BoundingBox: Sendable {}
#endif


extension BoundingBox: Equatable, Hashable {
    public static func ==(lhs: BoundingBox, rhs: BoundingBox) -> Bool {
        if lhs.sw != rhs.sw {
            return false
        }
        if lhs.ne != rhs.ne {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(sw)
        hasher.combine(ne)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBoundingBox: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BoundingBox {
        return
            try BoundingBox(
                sw: FfiConverterTypeGeographicCoordinate.read(from: &buf), 
                ne: FfiConverterTypeGeographicCoordinate.read(from: &buf)
        )
    }

    public static func write(_ value: BoundingBox, into buf: inout [UInt8]) {
        FfiConverterTypeGeographicCoordinate.write(value.sw, into: &buf)
        FfiConverterTypeGeographicCoordinate.write(value.ne, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBoundingBox_lift(_ buf: RustBuffer) throws -> BoundingBox {
    return try FfiConverterTypeBoundingBox.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBoundingBox_lower(_ value: BoundingBox) -> RustBuffer {
    return FfiConverterTypeBoundingBox.lower(value)
}


/**
 * Details about congestion for an incident.
 */
public struct Congestion {
    /**
     * The level of congestion caused by the incident.
     *
     * 0 = no congestion
     *
     * 100 = road closed
     *
     * Other values mean no congestion was calculated
     */
    public var value: UInt8

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The level of congestion caused by the incident.
         *
         * 0 = no congestion
         *
         * 100 = road closed
         *
         * Other values mean no congestion was calculated
         */value: UInt8) {
        self.value = value
    }
}

#if compiler(>=6)
extension Congestion: Sendable {}
#endif


extension Congestion: Equatable, Hashable {
    public static func ==(lhs: Congestion, rhs: Congestion) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCongestion: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Congestion {
        return
            try Congestion(
                value: FfiConverterUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: Congestion, into buf: inout [UInt8]) {
        FfiConverterUInt8.write(value.value, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCongestion_lift(_ buf: RustBuffer) throws -> Congestion {
    return try FfiConverterTypeCongestion.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCongestion_lower(_ value: Congestion) -> RustBuffer {
    return FfiConverterTypeCongestion.lower(value)
}


/**
 * The direction in which the user/device is observed to be traveling.
 */
public struct CourseOverGround {
    /**
     * The direction in which the user's device is traveling, measured in clockwise degrees from
     * true north (N = 0, E = 90, S = 180, W = 270).
     */
    public var degrees: UInt16
    /**
     * The accuracy of the course value, measured in degrees.
     */
    public var accuracy: UInt16?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The direction in which the user's device is traveling, measured in clockwise degrees from
         * true north (N = 0, E = 90, S = 180, W = 270).
         */degrees: UInt16, 
        /**
         * The accuracy of the course value, measured in degrees.
         */accuracy: UInt16?) {
        self.degrees = degrees
        self.accuracy = accuracy
    }
}

#if compiler(>=6)
extension CourseOverGround: Sendable {}
#endif


extension CourseOverGround: Equatable, Hashable {
    public static func ==(lhs: CourseOverGround, rhs: CourseOverGround) -> Bool {
        if lhs.degrees != rhs.degrees {
            return false
        }
        if lhs.accuracy != rhs.accuracy {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(degrees)
        hasher.combine(accuracy)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCourseOverGround: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CourseOverGround {
        return
            try CourseOverGround(
                degrees: FfiConverterUInt16.read(from: &buf), 
                accuracy: FfiConverterOptionUInt16.read(from: &buf)
        )
    }

    public static func write(_ value: CourseOverGround, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.degrees, into: &buf)
        FfiConverterOptionUInt16.write(value.accuracy, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCourseOverGround_lift(_ buf: RustBuffer) throws -> CourseOverGround {
    return try FfiConverterTypeCourseOverGround.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCourseOverGround_lower(_ value: CourseOverGround) -> RustBuffer {
    return FfiConverterTypeCourseOverGround.lower(value)
}


/**
 * A geographic coordinate in WGS84.
 */
public struct GeographicCoordinate {
    /**
     * The latitude (in degrees).
     */
    public var lat: Double
    /**
     * The Longitude (in degrees).
     */
    public var lng: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The latitude (in degrees).
         */lat: Double, 
        /**
         * The Longitude (in degrees).
         */lng: Double) {
        self.lat = lat
        self.lng = lng
    }
}

#if compiler(>=6)
extension GeographicCoordinate: Sendable {}
#endif


extension GeographicCoordinate: Equatable, Hashable {
    public static func ==(lhs: GeographicCoordinate, rhs: GeographicCoordinate) -> Bool {
        if lhs.lat != rhs.lat {
            return false
        }
        if lhs.lng != rhs.lng {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(lat)
        hasher.combine(lng)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeGeographicCoordinate: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GeographicCoordinate {
        return
            try GeographicCoordinate(
                lat: FfiConverterDouble.read(from: &buf), 
                lng: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: GeographicCoordinate, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.lat, into: &buf)
        FfiConverterDouble.write(value.lng, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGeographicCoordinate_lift(_ buf: RustBuffer) throws -> GeographicCoordinate {
    return try FfiConverterTypeGeographicCoordinate.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeGeographicCoordinate_lower(_ value: GeographicCoordinate) -> RustBuffer {
    return FfiConverterTypeGeographicCoordinate.lower(value)
}


/**
 * The heading of the user/device.
 */
public struct Heading {
    /**
     * The heading in degrees relative to true north.
     */
    public var trueHeading: UInt16
    /**
     * The platform specific accuracy of the heading value.
     */
    public var accuracy: UInt16
    /**
     * The time at which the heading was recorded.
     */
    public var timestamp: Date

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The heading in degrees relative to true north.
         */trueHeading: UInt16, 
        /**
         * The platform specific accuracy of the heading value.
         */accuracy: UInt16, 
        /**
         * The time at which the heading was recorded.
         */timestamp: Date) {
        self.trueHeading = trueHeading
        self.accuracy = accuracy
        self.timestamp = timestamp
    }
}

#if compiler(>=6)
extension Heading: Sendable {}
#endif


extension Heading: Equatable, Hashable {
    public static func ==(lhs: Heading, rhs: Heading) -> Bool {
        if lhs.trueHeading != rhs.trueHeading {
            return false
        }
        if lhs.accuracy != rhs.accuracy {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(trueHeading)
        hasher.combine(accuracy)
        hasher.combine(timestamp)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeHeading: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Heading {
        return
            try Heading(
                trueHeading: FfiConverterUInt16.read(from: &buf), 
                accuracy: FfiConverterUInt16.read(from: &buf), 
                timestamp: FfiConverterTimestamp.read(from: &buf)
        )
    }

    public static func write(_ value: Heading, into buf: inout [UInt8]) {
        FfiConverterUInt16.write(value.trueHeading, into: &buf)
        FfiConverterUInt16.write(value.accuracy, into: &buf)
        FfiConverterTimestamp.write(value.timestamp, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHeading_lift(_ buf: RustBuffer) throws -> Heading {
    return try FfiConverterTypeHeading.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeHeading_lower(_ value: Heading) -> RustBuffer {
    return FfiConverterTypeHeading.lower(value)
}


/**
 * An incident affecting the free flow of traffic,
 * such as constructions, accidents, and congestion.
 */
public struct Incident {
    /**
     * A unique identifier for the incident.
     */
    public var id: String
    /**
     * The type of incident.
     */
    public var incidentType: IncidentType
    /**
     * A short description of the incident.
     */
    public var description: String?
    /**
     * A longer description of the incident.
     */
    public var longDescription: String?
    /**
     * The time at which the incident was *last* created.
     *
     * NB: This can change throughout the life of the incident.
     */
    public var creationTime: UtcDateTime?
    /**
     * The time at which the incident started or is expected to start (ex: planned closure).
     */
    public var startTime: UtcDateTime?
    /**
     * The time at which the incident ended or is expected to end.
     */
    public var endTime: UtcDateTime?
    /**
     * The level of impact to traffic.
     */
    public var impact: Impact?
    /**
     * Lanes which are blocked by the incident.
     */
    public var lanesBlocked: [BlockedLane]
    /**
     * Info about the amount of congestion on the road around the incident.
     */
    public var congestion: Congestion?
    /**
     * Is the road completely closed?
     */
    public var closed: Bool?
    /**
     * The index into the [`RouteStep`] geometry where the incident starts.
     */
    public var geometryIndexStart: UInt64
    /**
     * The index into the [`RouteStep`] geometry where the incident ends.
     */
    public var geometryIndexEnd: UInt64?
    /**
     * Optional additional information about the type of incident (free-form text).
     */
    public var subType: String?
    /**
     * Optional descriptions about the type of incident (free-form text).
     */
    public var subTypeDescription: String?
    /**
     * The ISO 3166-1 alpha-2 code of the country in which the incident occurs.
     */
    public var iso31661Alpha2: String?
    /**
     * The ISO 3166-1 alpha-3 code of the country in which the incident occurs.
     */
    public var iso31661Alpha3: String?
    /**
     * A list of road names affected by the incident.
     */
    public var affectedRoadNames: [String]
    /**
     * The bounding box over which the incident occurs.
     */
    public var bbox: BoundingBox?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * A unique identifier for the incident.
         */id: String, 
        /**
         * The type of incident.
         */incidentType: IncidentType, 
        /**
         * A short description of the incident.
         */description: String?, 
        /**
         * A longer description of the incident.
         */longDescription: String?, 
        /**
         * The time at which the incident was *last* created.
         *
         * NB: This can change throughout the life of the incident.
         */creationTime: UtcDateTime?, 
        /**
         * The time at which the incident started or is expected to start (ex: planned closure).
         */startTime: UtcDateTime?, 
        /**
         * The time at which the incident ended or is expected to end.
         */endTime: UtcDateTime?, 
        /**
         * The level of impact to traffic.
         */impact: Impact?, 
        /**
         * Lanes which are blocked by the incident.
         */lanesBlocked: [BlockedLane], 
        /**
         * Info about the amount of congestion on the road around the incident.
         */congestion: Congestion?, 
        /**
         * Is the road completely closed?
         */closed: Bool?, 
        /**
         * The index into the [`RouteStep`] geometry where the incident starts.
         */geometryIndexStart: UInt64, 
        /**
         * The index into the [`RouteStep`] geometry where the incident ends.
         */geometryIndexEnd: UInt64?, 
        /**
         * Optional additional information about the type of incident (free-form text).
         */subType: String?, 
        /**
         * Optional descriptions about the type of incident (free-form text).
         */subTypeDescription: String?, 
        /**
         * The ISO 3166-1 alpha-2 code of the country in which the incident occurs.
         */iso31661Alpha2: String?, 
        /**
         * The ISO 3166-1 alpha-3 code of the country in which the incident occurs.
         */iso31661Alpha3: String?, 
        /**
         * A list of road names affected by the incident.
         */affectedRoadNames: [String], 
        /**
         * The bounding box over which the incident occurs.
         */bbox: BoundingBox?) {
        self.id = id
        self.incidentType = incidentType
        self.description = description
        self.longDescription = longDescription
        self.creationTime = creationTime
        self.startTime = startTime
        self.endTime = endTime
        self.impact = impact
        self.lanesBlocked = lanesBlocked
        self.congestion = congestion
        self.closed = closed
        self.geometryIndexStart = geometryIndexStart
        self.geometryIndexEnd = geometryIndexEnd
        self.subType = subType
        self.subTypeDescription = subTypeDescription
        self.iso31661Alpha2 = iso31661Alpha2
        self.iso31661Alpha3 = iso31661Alpha3
        self.affectedRoadNames = affectedRoadNames
        self.bbox = bbox
    }
}

#if compiler(>=6)
extension Incident: Sendable {}
#endif


extension Incident: Equatable, Hashable {
    public static func ==(lhs: Incident, rhs: Incident) -> Bool {
        if lhs.id != rhs.id {
            return false
        }
        if lhs.incidentType != rhs.incidentType {
            return false
        }
        if lhs.description != rhs.description {
            return false
        }
        if lhs.longDescription != rhs.longDescription {
            return false
        }
        if lhs.creationTime != rhs.creationTime {
            return false
        }
        if lhs.startTime != rhs.startTime {
            return false
        }
        if lhs.endTime != rhs.endTime {
            return false
        }
        if lhs.impact != rhs.impact {
            return false
        }
        if lhs.lanesBlocked != rhs.lanesBlocked {
            return false
        }
        if lhs.congestion != rhs.congestion {
            return false
        }
        if lhs.closed != rhs.closed {
            return false
        }
        if lhs.geometryIndexStart != rhs.geometryIndexStart {
            return false
        }
        if lhs.geometryIndexEnd != rhs.geometryIndexEnd {
            return false
        }
        if lhs.subType != rhs.subType {
            return false
        }
        if lhs.subTypeDescription != rhs.subTypeDescription {
            return false
        }
        if lhs.iso31661Alpha2 != rhs.iso31661Alpha2 {
            return false
        }
        if lhs.iso31661Alpha3 != rhs.iso31661Alpha3 {
            return false
        }
        if lhs.affectedRoadNames != rhs.affectedRoadNames {
            return false
        }
        if lhs.bbox != rhs.bbox {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
        hasher.combine(incidentType)
        hasher.combine(description)
        hasher.combine(longDescription)
        hasher.combine(creationTime)
        hasher.combine(startTime)
        hasher.combine(endTime)
        hasher.combine(impact)
        hasher.combine(lanesBlocked)
        hasher.combine(congestion)
        hasher.combine(closed)
        hasher.combine(geometryIndexStart)
        hasher.combine(geometryIndexEnd)
        hasher.combine(subType)
        hasher.combine(subTypeDescription)
        hasher.combine(iso31661Alpha2)
        hasher.combine(iso31661Alpha3)
        hasher.combine(affectedRoadNames)
        hasher.combine(bbox)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIncident: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Incident {
        return
            try Incident(
                id: FfiConverterString.read(from: &buf), 
                incidentType: FfiConverterTypeIncidentType.read(from: &buf), 
                description: FfiConverterOptionString.read(from: &buf), 
                longDescription: FfiConverterOptionString.read(from: &buf), 
                creationTime: FfiConverterOptionTypeUtcDateTime.read(from: &buf), 
                startTime: FfiConverterOptionTypeUtcDateTime.read(from: &buf), 
                endTime: FfiConverterOptionTypeUtcDateTime.read(from: &buf), 
                impact: FfiConverterOptionTypeImpact.read(from: &buf), 
                lanesBlocked: FfiConverterSequenceTypeBlockedLane.read(from: &buf), 
                congestion: FfiConverterOptionTypeCongestion.read(from: &buf), 
                closed: FfiConverterOptionBool.read(from: &buf), 
                geometryIndexStart: FfiConverterUInt64.read(from: &buf), 
                geometryIndexEnd: FfiConverterOptionUInt64.read(from: &buf), 
                subType: FfiConverterOptionString.read(from: &buf), 
                subTypeDescription: FfiConverterOptionString.read(from: &buf), 
                iso31661Alpha2: FfiConverterOptionString.read(from: &buf), 
                iso31661Alpha3: FfiConverterOptionString.read(from: &buf), 
                affectedRoadNames: FfiConverterSequenceString.read(from: &buf), 
                bbox: FfiConverterOptionTypeBoundingBox.read(from: &buf)
        )
    }

    public static func write(_ value: Incident, into buf: inout [UInt8]) {
        FfiConverterString.write(value.id, into: &buf)
        FfiConverterTypeIncidentType.write(value.incidentType, into: &buf)
        FfiConverterOptionString.write(value.description, into: &buf)
        FfiConverterOptionString.write(value.longDescription, into: &buf)
        FfiConverterOptionTypeUtcDateTime.write(value.creationTime, into: &buf)
        FfiConverterOptionTypeUtcDateTime.write(value.startTime, into: &buf)
        FfiConverterOptionTypeUtcDateTime.write(value.endTime, into: &buf)
        FfiConverterOptionTypeImpact.write(value.impact, into: &buf)
        FfiConverterSequenceTypeBlockedLane.write(value.lanesBlocked, into: &buf)
        FfiConverterOptionTypeCongestion.write(value.congestion, into: &buf)
        FfiConverterOptionBool.write(value.closed, into: &buf)
        FfiConverterUInt64.write(value.geometryIndexStart, into: &buf)
        FfiConverterOptionUInt64.write(value.geometryIndexEnd, into: &buf)
        FfiConverterOptionString.write(value.subType, into: &buf)
        FfiConverterOptionString.write(value.subTypeDescription, into: &buf)
        FfiConverterOptionString.write(value.iso31661Alpha2, into: &buf)
        FfiConverterOptionString.write(value.iso31661Alpha3, into: &buf)
        FfiConverterSequenceString.write(value.affectedRoadNames, into: &buf)
        FfiConverterOptionTypeBoundingBox.write(value.bbox, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIncident_lift(_ buf: RustBuffer) throws -> Incident {
    return try FfiConverterTypeIncident.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIncident_lower(_ value: Incident) -> RustBuffer {
    return FfiConverterTypeIncident.lower(value)
}


/**
 * The content of a visual instruction.
 */
public struct LaneInfo {
    public var active: Bool
    public var directions: [String]
    public var activeDirection: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(active: Bool, directions: [String], activeDirection: String?) {
        self.active = active
        self.directions = directions
        self.activeDirection = activeDirection
    }
}

#if compiler(>=6)
extension LaneInfo: Sendable {}
#endif


extension LaneInfo: Equatable, Hashable {
    public static func ==(lhs: LaneInfo, rhs: LaneInfo) -> Bool {
        if lhs.active != rhs.active {
            return false
        }
        if lhs.directions != rhs.directions {
            return false
        }
        if lhs.activeDirection != rhs.activeDirection {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(active)
        hasher.combine(directions)
        hasher.combine(activeDirection)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLaneInfo: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LaneInfo {
        return
            try LaneInfo(
                active: FfiConverterBool.read(from: &buf), 
                directions: FfiConverterSequenceString.read(from: &buf), 
                activeDirection: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: LaneInfo, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.active, into: &buf)
        FfiConverterSequenceString.write(value.directions, into: &buf)
        FfiConverterOptionString.write(value.activeDirection, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLaneInfo_lift(_ buf: RustBuffer) throws -> LaneInfo {
    return try FfiConverterTypeLaneInfo.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLaneInfo_lower(_ value: LaneInfo) -> RustBuffer {
    return FfiConverterTypeLaneInfo.lower(value)
}


/**
 * The current state of the simulation.
 */
public struct LocationSimulationState {
    public var currentLocation: UserLocation
    public var remainingLocations: [GeographicCoordinate]
    public var bias: LocationBias

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(currentLocation: UserLocation, remainingLocations: [GeographicCoordinate], bias: LocationBias) {
        self.currentLocation = currentLocation
        self.remainingLocations = remainingLocations
        self.bias = bias
    }
}

#if compiler(>=6)
extension LocationSimulationState: Sendable {}
#endif


extension LocationSimulationState: Equatable, Hashable {
    public static func ==(lhs: LocationSimulationState, rhs: LocationSimulationState) -> Bool {
        if lhs.currentLocation != rhs.currentLocation {
            return false
        }
        if lhs.remainingLocations != rhs.remainingLocations {
            return false
        }
        if lhs.bias != rhs.bias {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(currentLocation)
        hasher.combine(remainingLocations)
        hasher.combine(bias)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLocationSimulationState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LocationSimulationState {
        return
            try LocationSimulationState(
                currentLocation: FfiConverterTypeUserLocation.read(from: &buf), 
                remainingLocations: FfiConverterSequenceTypeGeographicCoordinate.read(from: &buf), 
                bias: FfiConverterTypeLocationBias.read(from: &buf)
        )
    }

    public static func write(_ value: LocationSimulationState, into buf: inout [UInt8]) {
        FfiConverterTypeUserLocation.write(value.currentLocation, into: &buf)
        FfiConverterSequenceTypeGeographicCoordinate.write(value.remainingLocations, into: &buf)
        FfiConverterTypeLocationBias.write(value.bias, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLocationSimulationState_lift(_ buf: RustBuffer) throws -> LocationSimulationState {
    return try FfiConverterTypeLocationSimulationState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLocationSimulationState_lower(_ value: LocationSimulationState) -> RustBuffer {
    return FfiConverterTypeLocationSimulationState.lower(value)
}


/**
 * The navigation state.
 *
 * This is typically created from an initial trip state
 * and conditions for advancing navigation to the next step.
 * Any internal navigation state is packed in here so that
 * the navigation controller can remain functionally pure.
 */
public struct NavState {
    public var tripState: TripState
    public var stepAdvanceCondition: StepAdvanceCondition
    public var recordingEvents: [NavigationRecordingEvent]?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(tripState: TripState, stepAdvanceCondition: StepAdvanceCondition, recordingEvents: [NavigationRecordingEvent]?) {
        self.tripState = tripState
        self.stepAdvanceCondition = stepAdvanceCondition
        self.recordingEvents = recordingEvents
    }
}

#if compiler(>=6)
extension NavState: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNavState: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NavState {
        return
            try NavState(
                tripState: FfiConverterTypeTripState.read(from: &buf), 
                stepAdvanceCondition: FfiConverterTypeStepAdvanceCondition.read(from: &buf), 
                recordingEvents: FfiConverterOptionSequenceTypeNavigationRecordingEvent.read(from: &buf)
        )
    }

    public static func write(_ value: NavState, into buf: inout [UInt8]) {
        FfiConverterTypeTripState.write(value.tripState, into: &buf)
        FfiConverterTypeStepAdvanceCondition.write(value.stepAdvanceCondition, into: &buf)
        FfiConverterOptionSequenceTypeNavigationRecordingEvent.write(value.recordingEvents, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNavState_lift(_ buf: RustBuffer) throws -> NavState {
    return try FfiConverterTypeNavState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNavState_lower(_ value: NavState) -> RustBuffer {
    return FfiConverterTypeNavState.lower(value)
}


public struct NavigationControllerConfig {
    /**
     * Configures when navigation advances to the next waypoint in the route.
     */
    public var waypointAdvance: WaypointAdvanceMode
    /**
     * Configures when navigation advances to the next step in the route.
     */
    public var stepAdvanceCondition: StepAdvanceCondition
    /**
     * A special advance condition used for the final 2 route steps (last and arrival).
     *
     * This exists because several of our step advance conditions require entry and
     * exit from a step's geometry. The end of the route/arrival doesn't always accommodate
     * the expected location updates for the core step advance condition.
     */
    public var arrivalStepAdvanceCondition: StepAdvanceCondition
    /**
     * Configures when the user is deemed to be off course.
     *
     * NOTE: This is distinct from the action that is taken.
     * It is only the determination that the user has deviated from the expected route.
     */
    public var routeDeviationTracking: RouteDeviationTracking
    /**
     * Configures how the heading component of the snapped location is reported in [`TripState`].
     */
    public var snappedLocationCourseFiltering: CourseFiltering

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Configures when navigation advances to the next waypoint in the route.
         */waypointAdvance: WaypointAdvanceMode, 
        /**
         * Configures when navigation advances to the next step in the route.
         */stepAdvanceCondition: StepAdvanceCondition, 
        /**
         * A special advance condition used for the final 2 route steps (last and arrival).
         *
         * This exists because several of our step advance conditions require entry and
         * exit from a step's geometry. The end of the route/arrival doesn't always accommodate
         * the expected location updates for the core step advance condition.
         */arrivalStepAdvanceCondition: StepAdvanceCondition, 
        /**
         * Configures when the user is deemed to be off course.
         *
         * NOTE: This is distinct from the action that is taken.
         * It is only the determination that the user has deviated from the expected route.
         */routeDeviationTracking: RouteDeviationTracking, 
        /**
         * Configures how the heading component of the snapped location is reported in [`TripState`].
         */snappedLocationCourseFiltering: CourseFiltering) {
        self.waypointAdvance = waypointAdvance
        self.stepAdvanceCondition = stepAdvanceCondition
        self.arrivalStepAdvanceCondition = arrivalStepAdvanceCondition
        self.routeDeviationTracking = routeDeviationTracking
        self.snappedLocationCourseFiltering = snappedLocationCourseFiltering
    }
}

#if compiler(>=6)
extension NavigationControllerConfig: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNavigationControllerConfig: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NavigationControllerConfig {
        return
            try NavigationControllerConfig(
                waypointAdvance: FfiConverterTypeWaypointAdvanceMode.read(from: &buf), 
                stepAdvanceCondition: FfiConverterTypeStepAdvanceCondition.read(from: &buf), 
                arrivalStepAdvanceCondition: FfiConverterTypeStepAdvanceCondition.read(from: &buf), 
                routeDeviationTracking: FfiConverterTypeRouteDeviationTracking.read(from: &buf), 
                snappedLocationCourseFiltering: FfiConverterTypeCourseFiltering.read(from: &buf)
        )
    }

    public static func write(_ value: NavigationControllerConfig, into buf: inout [UInt8]) {
        FfiConverterTypeWaypointAdvanceMode.write(value.waypointAdvance, into: &buf)
        FfiConverterTypeStepAdvanceCondition.write(value.stepAdvanceCondition, into: &buf)
        FfiConverterTypeStepAdvanceCondition.write(value.arrivalStepAdvanceCondition, into: &buf)
        FfiConverterTypeRouteDeviationTracking.write(value.routeDeviationTracking, into: &buf)
        FfiConverterTypeCourseFiltering.write(value.snappedLocationCourseFiltering, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNavigationControllerConfig_lift(_ buf: RustBuffer) throws -> NavigationControllerConfig {
    return try FfiConverterTypeNavigationControllerConfig.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNavigationControllerConfig_lower(_ value: NavigationControllerConfig) -> RustBuffer {
    return FfiConverterTypeNavigationControllerConfig.lower(value)
}


public struct NavigationRecordingEvent {
    /**
     * The timestamp of the event.
     */
    public var timestamp: Int64
    /**
     * Data associated with the event.
     */
    public var eventData: NavigationRecordingEventData

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The timestamp of the event.
         */timestamp: Int64, 
        /**
         * Data associated with the event.
         */eventData: NavigationRecordingEventData) {
        self.timestamp = timestamp
        self.eventData = eventData
    }
}

#if compiler(>=6)
extension NavigationRecordingEvent: Sendable {}
#endif


extension NavigationRecordingEvent: Equatable, Hashable {
    public static func ==(lhs: NavigationRecordingEvent, rhs: NavigationRecordingEvent) -> Bool {
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.eventData != rhs.eventData {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(timestamp)
        hasher.combine(eventData)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNavigationRecordingEvent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NavigationRecordingEvent {
        return
            try NavigationRecordingEvent(
                timestamp: FfiConverterInt64.read(from: &buf), 
                eventData: FfiConverterTypeNavigationRecordingEventData.read(from: &buf)
        )
    }

    public static func write(_ value: NavigationRecordingEvent, into buf: inout [UInt8]) {
        FfiConverterInt64.write(value.timestamp, into: &buf)
        FfiConverterTypeNavigationRecordingEventData.write(value.eventData, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNavigationRecordingEvent_lift(_ buf: RustBuffer) throws -> NavigationRecordingEvent {
    return try FfiConverterTypeNavigationRecordingEvent.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNavigationRecordingEvent_lower(_ value: NavigationRecordingEvent) -> RustBuffer {
    return FfiConverterTypeNavigationRecordingEvent.lower(value)
}


/**
 * Information describing the series of steps needed to travel between two or more points.
 *
 * NOTE: This type is unstable and is still under active development and should be
 * considered unstable.
 */
public struct Route {
    public var geometry: [GeographicCoordinate]
    public var bbox: BoundingBox
    /**
     * The total route distance, in meters.
     */
    public var distance: Double
    /**
     * The ordered list of waypoints to visit, including the starting point.
     * Note that this is distinct from the *geometry* which includes all points visited.
     * A waypoint represents a start/end point for a route leg.
     */
    public var waypoints: [Waypoint]
    public var steps: [RouteStep]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(geometry: [GeographicCoordinate], bbox: BoundingBox, 
        /**
         * The total route distance, in meters.
         */distance: Double, 
        /**
         * The ordered list of waypoints to visit, including the starting point.
         * Note that this is distinct from the *geometry* which includes all points visited.
         * A waypoint represents a start/end point for a route leg.
         */waypoints: [Waypoint], steps: [RouteStep]) {
        self.geometry = geometry
        self.bbox = bbox
        self.distance = distance
        self.waypoints = waypoints
        self.steps = steps
    }
}

#if compiler(>=6)
extension Route: Sendable {}
#endif


extension Route: Equatable, Hashable {
    public static func ==(lhs: Route, rhs: Route) -> Bool {
        if lhs.geometry != rhs.geometry {
            return false
        }
        if lhs.bbox != rhs.bbox {
            return false
        }
        if lhs.distance != rhs.distance {
            return false
        }
        if lhs.waypoints != rhs.waypoints {
            return false
        }
        if lhs.steps != rhs.steps {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(geometry)
        hasher.combine(bbox)
        hasher.combine(distance)
        hasher.combine(waypoints)
        hasher.combine(steps)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRoute: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Route {
        return
            try Route(
                geometry: FfiConverterSequenceTypeGeographicCoordinate.read(from: &buf), 
                bbox: FfiConverterTypeBoundingBox.read(from: &buf), 
                distance: FfiConverterDouble.read(from: &buf), 
                waypoints: FfiConverterSequenceTypeWaypoint.read(from: &buf), 
                steps: FfiConverterSequenceTypeRouteStep.read(from: &buf)
        )
    }

    public static func write(_ value: Route, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeGeographicCoordinate.write(value.geometry, into: &buf)
        FfiConverterTypeBoundingBox.write(value.bbox, into: &buf)
        FfiConverterDouble.write(value.distance, into: &buf)
        FfiConverterSequenceTypeWaypoint.write(value.waypoints, into: &buf)
        FfiConverterSequenceTypeRouteStep.write(value.steps, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRoute_lift(_ buf: RustBuffer) throws -> Route {
    return try FfiConverterTypeRoute.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRoute_lower(_ value: Route) -> RustBuffer {
    return FfiConverterTypeRoute.lower(value)
}


/**
 * A maneuver (such as a turn or merge) followed by travel of a certain distance until reaching
 * the next step.
 */
public struct RouteStep {
    /**
     * The full route geometry for this step.
     */
    public var geometry: [GeographicCoordinate]
    /**
     * The distance, in meters, to travel along the route after the maneuver to reach the next step.
     */
    public var distance: Double
    /**
     * The estimated duration, in seconds, that it will take to complete this step.
     */
    public var duration: Double
    /**
     * The name of the road being traveled on (useful for certain UI styles).
     */
    public var roadName: String?
    /**
     * A list of exits (name or number).
     */
    public var exits: [String]
    /**
     * A description of the maneuver (ex: "Turn wright onto main street").
     *
     * Note for UI implementers: the context this appears in (or doesn't)
     * depends somewhat on your use case and routing engine.
     * For example, this field is useful as a written instruction in Valhalla.
     */
    public var instruction: String
    /**
     * A list of instructions for visual display (usually as banners) at specific points along the step.
     */
    public var visualInstructions: [VisualInstruction]
    /**
     * A list of prompts to announce (via speech synthesis) at specific points along the step.
     */
    public var spokenInstructions: [SpokenInstruction]
    /**
     * A list of json encoded strings representing annotations between each coordinate along the step.
     */
    public var annotations: [String]?
    /**
     * A list of incidents that occur along the step.
     */
    public var incidents: [Incident]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The full route geometry for this step.
         */geometry: [GeographicCoordinate], 
        /**
         * The distance, in meters, to travel along the route after the maneuver to reach the next step.
         */distance: Double, 
        /**
         * The estimated duration, in seconds, that it will take to complete this step.
         */duration: Double, 
        /**
         * The name of the road being traveled on (useful for certain UI styles).
         */roadName: String?, 
        /**
         * A list of exits (name or number).
         */exits: [String], 
        /**
         * A description of the maneuver (ex: "Turn wright onto main street").
         *
         * Note for UI implementers: the context this appears in (or doesn't)
         * depends somewhat on your use case and routing engine.
         * For example, this field is useful as a written instruction in Valhalla.
         */instruction: String, 
        /**
         * A list of instructions for visual display (usually as banners) at specific points along the step.
         */visualInstructions: [VisualInstruction], 
        /**
         * A list of prompts to announce (via speech synthesis) at specific points along the step.
         */spokenInstructions: [SpokenInstruction], 
        /**
         * A list of json encoded strings representing annotations between each coordinate along the step.
         */annotations: [String]?, 
        /**
         * A list of incidents that occur along the step.
         */incidents: [Incident]) {
        self.geometry = geometry
        self.distance = distance
        self.duration = duration
        self.roadName = roadName
        self.exits = exits
        self.instruction = instruction
        self.visualInstructions = visualInstructions
        self.spokenInstructions = spokenInstructions
        self.annotations = annotations
        self.incidents = incidents
    }
}

#if compiler(>=6)
extension RouteStep: Sendable {}
#endif


extension RouteStep: Equatable, Hashable {
    public static func ==(lhs: RouteStep, rhs: RouteStep) -> Bool {
        if lhs.geometry != rhs.geometry {
            return false
        }
        if lhs.distance != rhs.distance {
            return false
        }
        if lhs.duration != rhs.duration {
            return false
        }
        if lhs.roadName != rhs.roadName {
            return false
        }
        if lhs.exits != rhs.exits {
            return false
        }
        if lhs.instruction != rhs.instruction {
            return false
        }
        if lhs.visualInstructions != rhs.visualInstructions {
            return false
        }
        if lhs.spokenInstructions != rhs.spokenInstructions {
            return false
        }
        if lhs.annotations != rhs.annotations {
            return false
        }
        if lhs.incidents != rhs.incidents {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(geometry)
        hasher.combine(distance)
        hasher.combine(duration)
        hasher.combine(roadName)
        hasher.combine(exits)
        hasher.combine(instruction)
        hasher.combine(visualInstructions)
        hasher.combine(spokenInstructions)
        hasher.combine(annotations)
        hasher.combine(incidents)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteStep: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteStep {
        return
            try RouteStep(
                geometry: FfiConverterSequenceTypeGeographicCoordinate.read(from: &buf), 
                distance: FfiConverterDouble.read(from: &buf), 
                duration: FfiConverterDouble.read(from: &buf), 
                roadName: FfiConverterOptionString.read(from: &buf), 
                exits: FfiConverterSequenceString.read(from: &buf), 
                instruction: FfiConverterString.read(from: &buf), 
                visualInstructions: FfiConverterSequenceTypeVisualInstruction.read(from: &buf), 
                spokenInstructions: FfiConverterSequenceTypeSpokenInstruction.read(from: &buf), 
                annotations: FfiConverterOptionSequenceString.read(from: &buf), 
                incidents: FfiConverterSequenceTypeIncident.read(from: &buf)
        )
    }

    public static func write(_ value: RouteStep, into buf: inout [UInt8]) {
        FfiConverterSequenceTypeGeographicCoordinate.write(value.geometry, into: &buf)
        FfiConverterDouble.write(value.distance, into: &buf)
        FfiConverterDouble.write(value.duration, into: &buf)
        FfiConverterOptionString.write(value.roadName, into: &buf)
        FfiConverterSequenceString.write(value.exits, into: &buf)
        FfiConverterString.write(value.instruction, into: &buf)
        FfiConverterSequenceTypeVisualInstruction.write(value.visualInstructions, into: &buf)
        FfiConverterSequenceTypeSpokenInstruction.write(value.spokenInstructions, into: &buf)
        FfiConverterOptionSequenceString.write(value.annotations, into: &buf)
        FfiConverterSequenceTypeIncident.write(value.incidents, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteStep_lift(_ buf: RustBuffer) throws -> RouteStep {
    return try FfiConverterTypeRouteStep.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteStep_lower(_ value: RouteStep) -> RustBuffer {
    return FfiConverterTypeRouteStep.lower(value)
}


/**
 * The speed of the user from the location provider.
 */
public struct Speed {
    /**
     * The user's speed in meters per second.
     */
    public var value: Double
    /**
     * The accuracy of the speed value, measured in meters per second.
     */
    public var accuracy: Double?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The user's speed in meters per second.
         */value: Double, 
        /**
         * The accuracy of the speed value, measured in meters per second.
         */accuracy: Double?) {
        self.value = value
        self.accuracy = accuracy
    }
}

#if compiler(>=6)
extension Speed: Sendable {}
#endif


extension Speed: Equatable, Hashable {
    public static func ==(lhs: Speed, rhs: Speed) -> Bool {
        if lhs.value != rhs.value {
            return false
        }
        if lhs.accuracy != rhs.accuracy {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(value)
        hasher.combine(accuracy)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSpeed: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Speed {
        return
            try Speed(
                value: FfiConverterDouble.read(from: &buf), 
                accuracy: FfiConverterOptionDouble.read(from: &buf)
        )
    }

    public static func write(_ value: Speed, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.value, into: &buf)
        FfiConverterOptionDouble.write(value.accuracy, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSpeed_lift(_ buf: RustBuffer) throws -> Speed {
    return try FfiConverterTypeSpeed.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSpeed_lower(_ value: Speed) -> RustBuffer {
    return FfiConverterTypeSpeed.lower(value)
}


/**
 * An instruction that can be synthesized using a TTS engine to announce an upcoming maneuver.
 *
 * Note that these do not have any locale information attached.
 */
public struct SpokenInstruction {
    /**
     * Plain-text instruction which can be synthesized with a TTS engine.
     */
    public var text: String
    /**
     * Speech Synthesis Markup Language, which should be preferred by clients capable of understanding it.
     */
    public var ssml: String?
    /**
     * How far (in meters) from the upcoming maneuver the instruction should start being displayed
     */
    public var triggerDistanceBeforeManeuver: Double
    /**
     * A unique identifier for this instruction.
     *
     * This is provided so that platform-layer integrations can easily disambiguate between distinct utterances,
     * which may have the same textual content.
     * UUIDs conveniently fill this purpose.
     *
     * NOTE: While it is possible to deterministically create UUIDs, we do not do so at this time.
     * This should be theoretically possible though if someone cares to write up a proposal and a PR.
     */
    public var utteranceId: Uuid

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * Plain-text instruction which can be synthesized with a TTS engine.
         */text: String, 
        /**
         * Speech Synthesis Markup Language, which should be preferred by clients capable of understanding it.
         */ssml: String?, 
        /**
         * How far (in meters) from the upcoming maneuver the instruction should start being displayed
         */triggerDistanceBeforeManeuver: Double, 
        /**
         * A unique identifier for this instruction.
         *
         * This is provided so that platform-layer integrations can easily disambiguate between distinct utterances,
         * which may have the same textual content.
         * UUIDs conveniently fill this purpose.
         *
         * NOTE: While it is possible to deterministically create UUIDs, we do not do so at this time.
         * This should be theoretically possible though if someone cares to write up a proposal and a PR.
         */utteranceId: Uuid) {
        self.text = text
        self.ssml = ssml
        self.triggerDistanceBeforeManeuver = triggerDistanceBeforeManeuver
        self.utteranceId = utteranceId
    }
}

#if compiler(>=6)
extension SpokenInstruction: Sendable {}
#endif


extension SpokenInstruction: Equatable, Hashable {
    public static func ==(lhs: SpokenInstruction, rhs: SpokenInstruction) -> Bool {
        if lhs.text != rhs.text {
            return false
        }
        if lhs.ssml != rhs.ssml {
            return false
        }
        if lhs.triggerDistanceBeforeManeuver != rhs.triggerDistanceBeforeManeuver {
            return false
        }
        if lhs.utteranceId != rhs.utteranceId {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(text)
        hasher.combine(ssml)
        hasher.combine(triggerDistanceBeforeManeuver)
        hasher.combine(utteranceId)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSpokenInstruction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SpokenInstruction {
        return
            try SpokenInstruction(
                text: FfiConverterString.read(from: &buf), 
                ssml: FfiConverterOptionString.read(from: &buf), 
                triggerDistanceBeforeManeuver: FfiConverterDouble.read(from: &buf), 
                utteranceId: FfiConverterTypeUuid.read(from: &buf)
        )
    }

    public static func write(_ value: SpokenInstruction, into buf: inout [UInt8]) {
        FfiConverterString.write(value.text, into: &buf)
        FfiConverterOptionString.write(value.ssml, into: &buf)
        FfiConverterDouble.write(value.triggerDistanceBeforeManeuver, into: &buf)
        FfiConverterTypeUuid.write(value.utteranceId, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSpokenInstruction_lift(_ buf: RustBuffer) throws -> SpokenInstruction {
    return try FfiConverterTypeSpokenInstruction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSpokenInstruction_lower(_ value: SpokenInstruction) -> RustBuffer {
    return FfiConverterTypeSpokenInstruction.lower(value)
}


/**
 * The step advance result is produced on every iteration of the navigation state machine and
 * used by the navigation to build a new [`NavState`](super::NavState) instance for that update.
 */
public struct StepAdvanceResult {
    /**
     * The step should be advanced.
     */
    public var shouldAdvance: Bool
    /**
     * The next iteration of the step advance condition.
     *
     * This is what the navigation controller passes to the next instance of [`NavState`](super::NavState) on the completion of
     * an update (e.g. a user location update). Usually, this value is one of the following:
     *
     * 1. When `should_advance` is true, this should typically be a clean/new instance of the condition.
     * 2. When the condition is not advancing, but the condition maintains no state, this should be a
     * clean/new instance of the condition.
     * 3. When the condition is not advancing and maintains state, this should be a new
     * instance including the current state of the condition. See [`DistanceEntryAndExitCondition`]
     *
     * IMPORTANT! If the condition advances. This **must** be the clean/default state.
     */
    public var nextIteration: StepAdvanceCondition

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The step should be advanced.
         */shouldAdvance: Bool, 
        /**
         * The next iteration of the step advance condition.
         *
         * This is what the navigation controller passes to the next instance of [`NavState`](super::NavState) on the completion of
         * an update (e.g. a user location update). Usually, this value is one of the following:
         *
         * 1. When `should_advance` is true, this should typically be a clean/new instance of the condition.
         * 2. When the condition is not advancing, but the condition maintains no state, this should be a
         * clean/new instance of the condition.
         * 3. When the condition is not advancing and maintains state, this should be a new
         * instance including the current state of the condition. See [`DistanceEntryAndExitCondition`]
         *
         * IMPORTANT! If the condition advances. This **must** be the clean/default state.
         */nextIteration: StepAdvanceCondition) {
        self.shouldAdvance = shouldAdvance
        self.nextIteration = nextIteration
    }
}

#if compiler(>=6)
extension StepAdvanceResult: Sendable {}
#endif



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeStepAdvanceResult: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> StepAdvanceResult {
        return
            try StepAdvanceResult(
                shouldAdvance: FfiConverterBool.read(from: &buf), 
                nextIteration: FfiConverterTypeStepAdvanceCondition.read(from: &buf)
        )
    }

    public static func write(_ value: StepAdvanceResult, into buf: inout [UInt8]) {
        FfiConverterBool.write(value.shouldAdvance, into: &buf)
        FfiConverterTypeStepAdvanceCondition.write(value.nextIteration, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStepAdvanceResult_lift(_ buf: RustBuffer) throws -> StepAdvanceResult {
    return try FfiConverterTypeStepAdvanceResult.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeStepAdvanceResult_lower(_ value: StepAdvanceResult) -> RustBuffer {
    return FfiConverterTypeStepAdvanceResult.lower(value)
}


/**
 * High-level state describing progress through a route.
 */
public struct TripProgress {
    /**
     * The distance to the next maneuver, in meters.
     */
    public var distanceToNextManeuver: Double
    /**
     * The total distance remaining in the trip, in meters.
     *
     * This is the sum of the distance remaining in the current step and the distance remaining in all subsequent steps.
     */
    public var distanceRemaining: Double
    /**
     * The total duration remaining in the trip, in seconds.
     */
    public var durationRemaining: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The distance to the next maneuver, in meters.
         */distanceToNextManeuver: Double, 
        /**
         * The total distance remaining in the trip, in meters.
         *
         * This is the sum of the distance remaining in the current step and the distance remaining in all subsequent steps.
         */distanceRemaining: Double, 
        /**
         * The total duration remaining in the trip, in seconds.
         */durationRemaining: Double) {
        self.distanceToNextManeuver = distanceToNextManeuver
        self.distanceRemaining = distanceRemaining
        self.durationRemaining = durationRemaining
    }
}

#if compiler(>=6)
extension TripProgress: Sendable {}
#endif


extension TripProgress: Equatable, Hashable {
    public static func ==(lhs: TripProgress, rhs: TripProgress) -> Bool {
        if lhs.distanceToNextManeuver != rhs.distanceToNextManeuver {
            return false
        }
        if lhs.distanceRemaining != rhs.distanceRemaining {
            return false
        }
        if lhs.durationRemaining != rhs.durationRemaining {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(distanceToNextManeuver)
        hasher.combine(distanceRemaining)
        hasher.combine(durationRemaining)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTripProgress: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TripProgress {
        return
            try TripProgress(
                distanceToNextManeuver: FfiConverterDouble.read(from: &buf), 
                distanceRemaining: FfiConverterDouble.read(from: &buf), 
                durationRemaining: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: TripProgress, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.distanceToNextManeuver, into: &buf)
        FfiConverterDouble.write(value.distanceRemaining, into: &buf)
        FfiConverterDouble.write(value.durationRemaining, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTripProgress_lift(_ buf: RustBuffer) throws -> TripProgress {
    return try FfiConverterTypeTripProgress.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTripProgress_lower(_ value: TripProgress) -> RustBuffer {
    return FfiConverterTypeTripProgress.lower(value)
}


/**
 * Information pertaining to the user's full navigation trip. This includes
 * simple stats like total duration and distance.
 */
public struct TripSummary {
    /**
     * The total raw distance traveled in the trip, in meters.
     */
    public var distanceTraveled: Double
    /**
     * The total snapped distance traveled in the trip, in meters.
     */
    public var snappedDistanceTraveled: Double
    /**
     * When the trip was started.
     */
    public var startedAt: UtcDateTime
    /**
     * When the trip was completed or canceled.
     */
    public var endedAt: UtcDateTime?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The total raw distance traveled in the trip, in meters.
         */distanceTraveled: Double, 
        /**
         * The total snapped distance traveled in the trip, in meters.
         */snappedDistanceTraveled: Double, 
        /**
         * When the trip was started.
         */startedAt: UtcDateTime, 
        /**
         * When the trip was completed or canceled.
         */endedAt: UtcDateTime?) {
        self.distanceTraveled = distanceTraveled
        self.snappedDistanceTraveled = snappedDistanceTraveled
        self.startedAt = startedAt
        self.endedAt = endedAt
    }
}

#if compiler(>=6)
extension TripSummary: Sendable {}
#endif


extension TripSummary: Equatable, Hashable {
    public static func ==(lhs: TripSummary, rhs: TripSummary) -> Bool {
        if lhs.distanceTraveled != rhs.distanceTraveled {
            return false
        }
        if lhs.snappedDistanceTraveled != rhs.snappedDistanceTraveled {
            return false
        }
        if lhs.startedAt != rhs.startedAt {
            return false
        }
        if lhs.endedAt != rhs.endedAt {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(distanceTraveled)
        hasher.combine(snappedDistanceTraveled)
        hasher.combine(startedAt)
        hasher.combine(endedAt)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTripSummary: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TripSummary {
        return
            try TripSummary(
                distanceTraveled: FfiConverterDouble.read(from: &buf), 
                snappedDistanceTraveled: FfiConverterDouble.read(from: &buf), 
                startedAt: FfiConverterTypeUtcDateTime.read(from: &buf), 
                endedAt: FfiConverterOptionTypeUtcDateTime.read(from: &buf)
        )
    }

    public static func write(_ value: TripSummary, into buf: inout [UInt8]) {
        FfiConverterDouble.write(value.distanceTraveled, into: &buf)
        FfiConverterDouble.write(value.snappedDistanceTraveled, into: &buf)
        FfiConverterTypeUtcDateTime.write(value.startedAt, into: &buf)
        FfiConverterOptionTypeUtcDateTime.write(value.endedAt, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTripSummary_lift(_ buf: RustBuffer) throws -> TripSummary {
    return try FfiConverterTypeTripSummary.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTripSummary_lower(_ value: TripSummary) -> RustBuffer {
    return FfiConverterTypeTripSummary.lower(value)
}


/**
 * The location of the user that is navigating.
 *
 * In addition to coordinates, this includes estimated accuracy and course information,
 * which can influence navigation logic and UI.
 *
 * NOTE: Heading is absent on purpose.
 * Heading updates are not related to a change in the user's location.
 */
public struct UserLocation {
    public var coordinates: GeographicCoordinate
    /**
     * The estimated accuracy of the coordinate (in meters)
     */
    public var horizontalAccuracy: Double
    public var courseOverGround: CourseOverGround?
    public var timestamp: Date
    public var speed: Speed?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(coordinates: GeographicCoordinate, 
        /**
         * The estimated accuracy of the coordinate (in meters)
         */horizontalAccuracy: Double, courseOverGround: CourseOverGround?, timestamp: Date, speed: Speed?) {
        self.coordinates = coordinates
        self.horizontalAccuracy = horizontalAccuracy
        self.courseOverGround = courseOverGround
        self.timestamp = timestamp
        self.speed = speed
    }
}

#if compiler(>=6)
extension UserLocation: Sendable {}
#endif


extension UserLocation: Equatable, Hashable {
    public static func ==(lhs: UserLocation, rhs: UserLocation) -> Bool {
        if lhs.coordinates != rhs.coordinates {
            return false
        }
        if lhs.horizontalAccuracy != rhs.horizontalAccuracy {
            return false
        }
        if lhs.courseOverGround != rhs.courseOverGround {
            return false
        }
        if lhs.timestamp != rhs.timestamp {
            return false
        }
        if lhs.speed != rhs.speed {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(coordinates)
        hasher.combine(horizontalAccuracy)
        hasher.combine(courseOverGround)
        hasher.combine(timestamp)
        hasher.combine(speed)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUserLocation: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UserLocation {
        return
            try UserLocation(
                coordinates: FfiConverterTypeGeographicCoordinate.read(from: &buf), 
                horizontalAccuracy: FfiConverterDouble.read(from: &buf), 
                courseOverGround: FfiConverterOptionTypeCourseOverGround.read(from: &buf), 
                timestamp: FfiConverterTimestamp.read(from: &buf), 
                speed: FfiConverterOptionTypeSpeed.read(from: &buf)
        )
    }

    public static func write(_ value: UserLocation, into buf: inout [UInt8]) {
        FfiConverterTypeGeographicCoordinate.write(value.coordinates, into: &buf)
        FfiConverterDouble.write(value.horizontalAccuracy, into: &buf)
        FfiConverterOptionTypeCourseOverGround.write(value.courseOverGround, into: &buf)
        FfiConverterTimestamp.write(value.timestamp, into: &buf)
        FfiConverterOptionTypeSpeed.write(value.speed, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserLocation_lift(_ buf: RustBuffer) throws -> UserLocation {
    return try FfiConverterTypeUserLocation.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUserLocation_lower(_ value: UserLocation) -> RustBuffer {
    return FfiConverterTypeUserLocation.lower(value)
}


/**
 * An instruction for visual display (usually as banners) at a specific point along a [`RouteStep`].
 */
public struct VisualInstruction {
    /**
     * The primary instruction content.
     *
     * This is usually given more visual weight.
     */
    public var primaryContent: VisualInstructionContent
    /**
     * Optional secondary instruction content.
     */
    public var secondaryContent: VisualInstructionContent?
    /**
     * Optional sub-maneuver instruction content.
     */
    public var subContent: VisualInstructionContent?
    /**
     * How far (in meters) from the upcoming maneuver the instruction should start being displayed
     */
    public var triggerDistanceBeforeManeuver: Double

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The primary instruction content.
         *
         * This is usually given more visual weight.
         */primaryContent: VisualInstructionContent, 
        /**
         * Optional secondary instruction content.
         */secondaryContent: VisualInstructionContent?, 
        /**
         * Optional sub-maneuver instruction content.
         */subContent: VisualInstructionContent?, 
        /**
         * How far (in meters) from the upcoming maneuver the instruction should start being displayed
         */triggerDistanceBeforeManeuver: Double) {
        self.primaryContent = primaryContent
        self.secondaryContent = secondaryContent
        self.subContent = subContent
        self.triggerDistanceBeforeManeuver = triggerDistanceBeforeManeuver
    }
}

#if compiler(>=6)
extension VisualInstruction: Sendable {}
#endif


extension VisualInstruction: Equatable, Hashable {
    public static func ==(lhs: VisualInstruction, rhs: VisualInstruction) -> Bool {
        if lhs.primaryContent != rhs.primaryContent {
            return false
        }
        if lhs.secondaryContent != rhs.secondaryContent {
            return false
        }
        if lhs.subContent != rhs.subContent {
            return false
        }
        if lhs.triggerDistanceBeforeManeuver != rhs.triggerDistanceBeforeManeuver {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(primaryContent)
        hasher.combine(secondaryContent)
        hasher.combine(subContent)
        hasher.combine(triggerDistanceBeforeManeuver)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVisualInstruction: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VisualInstruction {
        return
            try VisualInstruction(
                primaryContent: FfiConverterTypeVisualInstructionContent.read(from: &buf), 
                secondaryContent: FfiConverterOptionTypeVisualInstructionContent.read(from: &buf), 
                subContent: FfiConverterOptionTypeVisualInstructionContent.read(from: &buf), 
                triggerDistanceBeforeManeuver: FfiConverterDouble.read(from: &buf)
        )
    }

    public static func write(_ value: VisualInstruction, into buf: inout [UInt8]) {
        FfiConverterTypeVisualInstructionContent.write(value.primaryContent, into: &buf)
        FfiConverterOptionTypeVisualInstructionContent.write(value.secondaryContent, into: &buf)
        FfiConverterOptionTypeVisualInstructionContent.write(value.subContent, into: &buf)
        FfiConverterDouble.write(value.triggerDistanceBeforeManeuver, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVisualInstruction_lift(_ buf: RustBuffer) throws -> VisualInstruction {
    return try FfiConverterTypeVisualInstruction.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVisualInstruction_lower(_ value: VisualInstruction) -> RustBuffer {
    return FfiConverterTypeVisualInstruction.lower(value)
}


/**
 * The content of a visual instruction.
 */
public struct VisualInstructionContent {
    /**
     * The text to display.
     */
    public var text: String
    /**
     * A standardized maneuver type (if any).
     */
    public var maneuverType: ManeuverType?
    /**
     * A standardized maneuver modifier (if any).
     */
    public var maneuverModifier: ManeuverModifier?
    /**
     * If applicable, the number of degrees you need to go around the roundabout before exiting.
     *
     * For example, entering and exiting the roundabout in the same direction of travel
     * (as if you had gone straight, apart from the detour)
     * would be an exit angle of 180 degrees.
     */
    public var roundaboutExitDegrees: UInt16?
    /**
     * Detailed information about the lanes. This is typically only present in sub-maneuver instructions.
     */
    public var laneInfo: [LaneInfo]?
    /**
     * The exit number (or similar identifier like "8B").
     */
    public var exitNumbers: [String]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(
        /**
         * The text to display.
         */text: String, 
        /**
         * A standardized maneuver type (if any).
         */maneuverType: ManeuverType?, 
        /**
         * A standardized maneuver modifier (if any).
         */maneuverModifier: ManeuverModifier?, 
        /**
         * If applicable, the number of degrees you need to go around the roundabout before exiting.
         *
         * For example, entering and exiting the roundabout in the same direction of travel
         * (as if you had gone straight, apart from the detour)
         * would be an exit angle of 180 degrees.
         */roundaboutExitDegrees: UInt16?, 
        /**
         * Detailed information about the lanes. This is typically only present in sub-maneuver instructions.
         */laneInfo: [LaneInfo]?, 
        /**
         * The exit number (or similar identifier like "8B").
         */exitNumbers: [String]) {
        self.text = text
        self.maneuverType = maneuverType
        self.maneuverModifier = maneuverModifier
        self.roundaboutExitDegrees = roundaboutExitDegrees
        self.laneInfo = laneInfo
        self.exitNumbers = exitNumbers
    }
}

#if compiler(>=6)
extension VisualInstructionContent: Sendable {}
#endif


extension VisualInstructionContent: Equatable, Hashable {
    public static func ==(lhs: VisualInstructionContent, rhs: VisualInstructionContent) -> Bool {
        if lhs.text != rhs.text {
            return false
        }
        if lhs.maneuverType != rhs.maneuverType {
            return false
        }
        if lhs.maneuverModifier != rhs.maneuverModifier {
            return false
        }
        if lhs.roundaboutExitDegrees != rhs.roundaboutExitDegrees {
            return false
        }
        if lhs.laneInfo != rhs.laneInfo {
            return false
        }
        if lhs.exitNumbers != rhs.exitNumbers {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(text)
        hasher.combine(maneuverType)
        hasher.combine(maneuverModifier)
        hasher.combine(roundaboutExitDegrees)
        hasher.combine(laneInfo)
        hasher.combine(exitNumbers)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeVisualInstructionContent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> VisualInstructionContent {
        return
            try VisualInstructionContent(
                text: FfiConverterString.read(from: &buf), 
                maneuverType: FfiConverterOptionTypeManeuverType.read(from: &buf), 
                maneuverModifier: FfiConverterOptionTypeManeuverModifier.read(from: &buf), 
                roundaboutExitDegrees: FfiConverterOptionUInt16.read(from: &buf), 
                laneInfo: FfiConverterOptionSequenceTypeLaneInfo.read(from: &buf), 
                exitNumbers: FfiConverterSequenceString.read(from: &buf)
        )
    }

    public static func write(_ value: VisualInstructionContent, into buf: inout [UInt8]) {
        FfiConverterString.write(value.text, into: &buf)
        FfiConverterOptionTypeManeuverType.write(value.maneuverType, into: &buf)
        FfiConverterOptionTypeManeuverModifier.write(value.maneuverModifier, into: &buf)
        FfiConverterOptionUInt16.write(value.roundaboutExitDegrees, into: &buf)
        FfiConverterOptionSequenceTypeLaneInfo.write(value.laneInfo, into: &buf)
        FfiConverterSequenceString.write(value.exitNumbers, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVisualInstructionContent_lift(_ buf: RustBuffer) throws -> VisualInstructionContent {
    return try FfiConverterTypeVisualInstructionContent.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeVisualInstructionContent_lower(_ value: VisualInstructionContent) -> RustBuffer {
    return FfiConverterTypeVisualInstructionContent.lower(value)
}


/**
 * A waypoint along a route.
 *
 * Within the context of Ferrostar, a route request consists of exactly one [`UserLocation`]
 * and at least one [`Waypoint`]. The route starts from the user's location (which may
 * contain other useful information like their current course for the [`crate::routing_adapters::RouteRequestGenerator`]
 * to use) and proceeds through one or more waypoints.
 *
 * Waypoints are used during route calculation, are tracked throughout the lifecycle of a trip,
 * and are used for recalculating when the user deviates from the expected route.
 *
 * Note that support for properties beyond basic geographic coordinates varies by routing engine.
 */
public struct Waypoint {
    public var coordinate: GeographicCoordinate
    public var kind: WaypointKind

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(coordinate: GeographicCoordinate, kind: WaypointKind) {
        self.coordinate = coordinate
        self.kind = kind
    }
}

#if compiler(>=6)
extension Waypoint: Sendable {}
#endif


extension Waypoint: Equatable, Hashable {
    public static func ==(lhs: Waypoint, rhs: Waypoint) -> Bool {
        if lhs.coordinate != rhs.coordinate {
            return false
        }
        if lhs.kind != rhs.kind {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(coordinate)
        hasher.combine(kind)
    }
}



#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWaypoint: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Waypoint {
        return
            try Waypoint(
                coordinate: FfiConverterTypeGeographicCoordinate.read(from: &buf), 
                kind: FfiConverterTypeWaypointKind.read(from: &buf)
        )
    }

    public static func write(_ value: Waypoint, into buf: inout [UInt8]) {
        FfiConverterTypeGeographicCoordinate.write(value.coordinate, into: &buf)
        FfiConverterTypeWaypointKind.write(value.kind, into: &buf)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWaypoint_lift(_ buf: RustBuffer) throws -> Waypoint {
    return try FfiConverterTypeWaypoint.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWaypoint_lower(_ value: Waypoint) -> RustBuffer {
    return FfiConverterTypeWaypoint.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The lane type blocked by the incident.
 */

public enum BlockedLane {
    
    case left
    case leftCenter
    case leftTurnLane
    case center
    case right
    case rightCenter
    case rightTurnLane
    case hov
}


#if compiler(>=6)
extension BlockedLane: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeBlockedLane: FfiConverterRustBuffer {
    typealias SwiftType = BlockedLane

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> BlockedLane {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .left
        
        case 2: return .leftCenter
        
        case 3: return .leftTurnLane
        
        case 4: return .center
        
        case 5: return .right
        
        case 6: return .rightCenter
        
        case 7: return .rightTurnLane
        
        case 8: return .hov
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: BlockedLane, into buf: inout [UInt8]) {
        switch value {
        
        
        case .left:
            writeInt(&buf, Int32(1))
        
        
        case .leftCenter:
            writeInt(&buf, Int32(2))
        
        
        case .leftTurnLane:
            writeInt(&buf, Int32(3))
        
        
        case .center:
            writeInt(&buf, Int32(4))
        
        
        case .right:
            writeInt(&buf, Int32(5))
        
        
        case .rightCenter:
            writeInt(&buf, Int32(6))
        
        
        case .rightTurnLane:
            writeInt(&buf, Int32(7))
        
        
        case .hov:
            writeInt(&buf, Int32(8))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlockedLane_lift(_ buf: RustBuffer) throws -> BlockedLane {
    return try FfiConverterTypeBlockedLane.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeBlockedLane_lower(_ value: BlockedLane) -> RustBuffer {
    return FfiConverterTypeBlockedLane.lower(value)
}


extension BlockedLane: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Controls filtering/post-processing of user course by the [`NavigationController`].
 */

public enum CourseFiltering {
    
    /**
     * Snap the user's course to the current step's linestring using the next index in the step's geometry.

     */
    case snapToRoute
    /**
     * Use the raw course as reported by the location provider with no processing.
     */
    case raw
}


#if compiler(>=6)
extension CourseFiltering: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeCourseFiltering: FfiConverterRustBuffer {
    typealias SwiftType = CourseFiltering

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CourseFiltering {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .snapToRoute
        
        case 2: return .raw
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CourseFiltering, into buf: inout [UInt8]) {
        switch value {
        
        
        case .snapToRoute:
            writeInt(&buf, Int32(1))
        
        
        case .raw:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCourseFiltering_lift(_ buf: RustBuffer) throws -> CourseFiltering {
    return try FfiConverterTypeCourseFiltering.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeCourseFiltering_lower(_ value: CourseFiltering) -> RustBuffer {
    return FfiConverterTypeCourseFiltering.lower(value)
}


extension CourseFiltering: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The impact of the incident that has occurred.
 */

public enum Impact {
    
    case unknown
    case critical
    case major
    case minor
    case low
}


#if compiler(>=6)
extension Impact: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeImpact: FfiConverterRustBuffer {
    typealias SwiftType = Impact

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Impact {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .unknown
        
        case 2: return .critical
        
        case 3: return .major
        
        case 4: return .minor
        
        case 5: return .low
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Impact, into buf: inout [UInt8]) {
        switch value {
        
        
        case .unknown:
            writeInt(&buf, Int32(1))
        
        
        case .critical:
            writeInt(&buf, Int32(2))
        
        
        case .major:
            writeInt(&buf, Int32(3))
        
        
        case .minor:
            writeInt(&buf, Int32(4))
        
        
        case .low:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImpact_lift(_ buf: RustBuffer) throws -> Impact {
    return try FfiConverterTypeImpact.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeImpact_lower(_ value: Impact) -> RustBuffer {
    return FfiConverterTypeImpact.lower(value)
}


extension Impact: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The type of incident that has occurred.
 */

public enum IncidentType {
    
    case accident
    case congestion
    case construction
    case disabledVehicle
    case laneRestriction
    case massTransit
    case miscellaneous
    case otherNews
    case plannedEvent
    case roadClosure
    case roadHazard
    case weather
}


#if compiler(>=6)
extension IncidentType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeIncidentType: FfiConverterRustBuffer {
    typealias SwiftType = IncidentType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> IncidentType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .accident
        
        case 2: return .congestion
        
        case 3: return .construction
        
        case 4: return .disabledVehicle
        
        case 5: return .laneRestriction
        
        case 6: return .massTransit
        
        case 7: return .miscellaneous
        
        case 8: return .otherNews
        
        case 9: return .plannedEvent
        
        case 10: return .roadClosure
        
        case 11: return .roadHazard
        
        case 12: return .weather
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: IncidentType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .accident:
            writeInt(&buf, Int32(1))
        
        
        case .congestion:
            writeInt(&buf, Int32(2))
        
        
        case .construction:
            writeInt(&buf, Int32(3))
        
        
        case .disabledVehicle:
            writeInt(&buf, Int32(4))
        
        
        case .laneRestriction:
            writeInt(&buf, Int32(5))
        
        
        case .massTransit:
            writeInt(&buf, Int32(6))
        
        
        case .miscellaneous:
            writeInt(&buf, Int32(7))
        
        
        case .otherNews:
            writeInt(&buf, Int32(8))
        
        
        case .plannedEvent:
            writeInt(&buf, Int32(9))
        
        
        case .roadClosure:
            writeInt(&buf, Int32(10))
        
        
        case .roadHazard:
            writeInt(&buf, Int32(11))
        
        
        case .weather:
            writeInt(&buf, Int32(12))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIncidentType_lift(_ buf: RustBuffer) throws -> IncidentType {
    return try FfiConverterTypeIncidentType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeIncidentType_lower(_ value: IncidentType) -> RustBuffer {
    return FfiConverterTypeIncidentType.lower(value)
}


extension IncidentType: Equatable, Hashable {}







public enum InstantiationError: Swift.Error {

    
    
    case OptionsJsonParseError
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeInstantiationError: FfiConverterRustBuffer {
    typealias SwiftType = InstantiationError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> InstantiationError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .OptionsJsonParseError

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: InstantiationError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .OptionsJsonParseError:
            writeInt(&buf, Int32(1))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInstantiationError_lift(_ buf: RustBuffer) throws -> InstantiationError {
    return try FfiConverterTypeInstantiationError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeInstantiationError_lower(_ value: InstantiationError) -> RustBuffer {
    return FfiConverterTypeInstantiationError.lower(value)
}


extension InstantiationError: Equatable, Hashable {}




extension InstantiationError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Controls how simulated locations deviate from the actual route line.
 * This simulates real-world GPS behavior where readings often have systematic bias.
 */

public enum LocationBias {
    
    /**
     * Simulates GPS bias by offsetting locations to the left of the route direction.
     * The f64 parameter specifies the offset distance in meters.
     */
    case left(Double
    )
    /**
     * Simulates GPS bias by offsetting locations to the right of the route direction.
     * The f64 parameter specifies the offset distance in meters.
     */
    case right(Double
    )
    /**
     * Simulates GPS bias by randomly choosing left or right offset on initialization
     * and maintaining that bias throughout the route.
     * The f64 parameter specifies the offset distance in meters.
     *
     * This mimics real-world GPS behavior where bias direction is random but typically
     * remains consistent during a trip.
     */
    case random(Double
    )
    /**
     * No position bias - locations follow the route line exactly.
     *
     * This provides "perfect" GPS behavior, useful for testing basic route following
     * without position uncertainty.
     */
    case none
}


#if compiler(>=6)
extension LocationBias: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeLocationBias: FfiConverterRustBuffer {
    typealias SwiftType = LocationBias

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LocationBias {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .left(try FfiConverterDouble.read(from: &buf)
        )
        
        case 2: return .right(try FfiConverterDouble.read(from: &buf)
        )
        
        case 3: return .random(try FfiConverterDouble.read(from: &buf)
        )
        
        case 4: return .none
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LocationBias, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .left(v1):
            writeInt(&buf, Int32(1))
            FfiConverterDouble.write(v1, into: &buf)
            
        
        case let .right(v1):
            writeInt(&buf, Int32(2))
            FfiConverterDouble.write(v1, into: &buf)
            
        
        case let .random(v1):
            writeInt(&buf, Int32(3))
            FfiConverterDouble.write(v1, into: &buf)
            
        
        case .none:
            writeInt(&buf, Int32(4))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLocationBias_lift(_ buf: RustBuffer) throws -> LocationBias {
    return try FfiConverterTypeLocationBias.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeLocationBias_lower(_ value: LocationBias) -> RustBuffer {
    return FfiConverterTypeLocationBias.lower(value)
}


extension LocationBias: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Additional information to further specify a [`ManeuverType`].
 */

public enum ManeuverModifier {
    
    case uTurn
    case sharpRight
    case right
    case slightRight
    case straight
    case slightLeft
    case left
    case sharpLeft
}


#if compiler(>=6)
extension ManeuverModifier: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeManeuverModifier: FfiConverterRustBuffer {
    typealias SwiftType = ManeuverModifier

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ManeuverModifier {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .uTurn
        
        case 2: return .sharpRight
        
        case 3: return .right
        
        case 4: return .slightRight
        
        case 5: return .straight
        
        case 6: return .slightLeft
        
        case 7: return .left
        
        case 8: return .sharpLeft
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ManeuverModifier, into buf: inout [UInt8]) {
        switch value {
        
        
        case .uTurn:
            writeInt(&buf, Int32(1))
        
        
        case .sharpRight:
            writeInt(&buf, Int32(2))
        
        
        case .right:
            writeInt(&buf, Int32(3))
        
        
        case .slightRight:
            writeInt(&buf, Int32(4))
        
        
        case .straight:
            writeInt(&buf, Int32(5))
        
        
        case .slightLeft:
            writeInt(&buf, Int32(6))
        
        
        case .left:
            writeInt(&buf, Int32(7))
        
        
        case .sharpLeft:
            writeInt(&buf, Int32(8))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeManeuverModifier_lift(_ buf: RustBuffer) throws -> ManeuverModifier {
    return try FfiConverterTypeManeuverModifier.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeManeuverModifier_lower(_ value: ManeuverModifier) -> RustBuffer {
    return FfiConverterTypeManeuverModifier.lower(value)
}


extension ManeuverModifier: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The broad class of maneuver to perform.
 *
 * This is usually combined with [`ManeuverModifier`] in [`VisualInstructionContent`].
 */

public enum ManeuverType {
    
    case turn
    case newName
    case depart
    case arrive
    case merge
    case onRamp
    case offRamp
    case fork
    case endOfRoad
    case `continue`
    case roundabout
    case rotary
    case roundaboutTurn
    case notification
    case exitRoundabout
    case exitRotary
}


#if compiler(>=6)
extension ManeuverType: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeManeuverType: FfiConverterRustBuffer {
    typealias SwiftType = ManeuverType

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ManeuverType {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .turn
        
        case 2: return .newName
        
        case 3: return .depart
        
        case 4: return .arrive
        
        case 5: return .merge
        
        case 6: return .onRamp
        
        case 7: return .offRamp
        
        case 8: return .fork
        
        case 9: return .endOfRoad
        
        case 10: return .`continue`
        
        case 11: return .roundabout
        
        case 12: return .rotary
        
        case 13: return .roundaboutTurn
        
        case 14: return .notification
        
        case 15: return .exitRoundabout
        
        case 16: return .exitRotary
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ManeuverType, into buf: inout [UInt8]) {
        switch value {
        
        
        case .turn:
            writeInt(&buf, Int32(1))
        
        
        case .newName:
            writeInt(&buf, Int32(2))
        
        
        case .depart:
            writeInt(&buf, Int32(3))
        
        
        case .arrive:
            writeInt(&buf, Int32(4))
        
        
        case .merge:
            writeInt(&buf, Int32(5))
        
        
        case .onRamp:
            writeInt(&buf, Int32(6))
        
        
        case .offRamp:
            writeInt(&buf, Int32(7))
        
        
        case .fork:
            writeInt(&buf, Int32(8))
        
        
        case .endOfRoad:
            writeInt(&buf, Int32(9))
        
        
        case .`continue`:
            writeInt(&buf, Int32(10))
        
        
        case .roundabout:
            writeInt(&buf, Int32(11))
        
        
        case .rotary:
            writeInt(&buf, Int32(12))
        
        
        case .roundaboutTurn:
            writeInt(&buf, Int32(13))
        
        
        case .notification:
            writeInt(&buf, Int32(14))
        
        
        case .exitRoundabout:
            writeInt(&buf, Int32(15))
        
        
        case .exitRotary:
            writeInt(&buf, Int32(16))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeManeuverType_lift(_ buf: RustBuffer) throws -> ManeuverType {
    return try FfiConverterTypeManeuverType.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeManeuverType_lower(_ value: ManeuverType) -> RustBuffer {
    return FfiConverterTypeManeuverType.lower(value)
}


extension ManeuverType: Equatable, Hashable {}







public enum ModelError: Swift.Error {

    
    
    case PolylineGenerationError(error: String
    )
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeModelError: FfiConverterRustBuffer {
    typealias SwiftType = ModelError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ModelError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .PolylineGenerationError(
            error: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ModelError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .PolylineGenerationError(error):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(error, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeModelError_lift(_ buf: RustBuffer) throws -> ModelError {
    return try FfiConverterTypeModelError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeModelError_lower(_ value: ModelError) -> RustBuffer {
    return FfiConverterTypeModelError.lower(value)
}


extension ModelError: Equatable, Hashable {}




extension ModelError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.

public enum NavigationRecordingEventData {
    
    case locationUpdate(
        /**
         * Updated user location.
         */userLocation: UserLocation
    )
    case tripStateUpdate(
        /**
         * Updated trip state.
         */tripState: TripState
    )
    case routeUpdate(
        /**
         * Updated route steps.
         */route: Route
    )
    case error(
        /**
         * Error message.
         */errorMessage: String
    )
}


#if compiler(>=6)
extension NavigationRecordingEventData: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeNavigationRecordingEventData: FfiConverterRustBuffer {
    typealias SwiftType = NavigationRecordingEventData

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NavigationRecordingEventData {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .locationUpdate(userLocation: try FfiConverterTypeUserLocation.read(from: &buf)
        )
        
        case 2: return .tripStateUpdate(tripState: try FfiConverterTypeTripState.read(from: &buf)
        )
        
        case 3: return .routeUpdate(route: try FfiConverterTypeRoute.read(from: &buf)
        )
        
        case 4: return .error(errorMessage: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NavigationRecordingEventData, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .locationUpdate(userLocation):
            writeInt(&buf, Int32(1))
            FfiConverterTypeUserLocation.write(userLocation, into: &buf)
            
        
        case let .tripStateUpdate(tripState):
            writeInt(&buf, Int32(2))
            FfiConverterTypeTripState.write(tripState, into: &buf)
            
        
        case let .routeUpdate(route):
            writeInt(&buf, Int32(3))
            FfiConverterTypeRoute.write(route, into: &buf)
            
        
        case let .error(errorMessage):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(errorMessage, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNavigationRecordingEventData_lift(_ buf: RustBuffer) throws -> NavigationRecordingEventData {
    return try FfiConverterTypeNavigationRecordingEventData.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeNavigationRecordingEventData_lower(_ value: NavigationRecordingEventData) -> RustBuffer {
    return FfiConverterTypeNavigationRecordingEventData.lower(value)
}


extension NavigationRecordingEventData: Equatable, Hashable {}







public enum ParsingError: Swift.Error {

    
    
    case InvalidRouteObject(error: String
    )
    case InvalidGeometry(error: String
    )
    case MalformedAnnotations(error: String
    )
    case InvalidStatusCode(code: String, description: String?
    )
    case UnknownParsingError
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeParsingError: FfiConverterRustBuffer {
    typealias SwiftType = ParsingError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ParsingError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .InvalidRouteObject(
            error: try FfiConverterString.read(from: &buf)
            )
        case 2: return .InvalidGeometry(
            error: try FfiConverterString.read(from: &buf)
            )
        case 3: return .MalformedAnnotations(
            error: try FfiConverterString.read(from: &buf)
            )
        case 4: return .InvalidStatusCode(
            code: try FfiConverterString.read(from: &buf), 
            description: try FfiConverterOptionString.read(from: &buf)
            )
        case 5: return .UnknownParsingError

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ParsingError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .InvalidRouteObject(error):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(error, into: &buf)
            
        
        case let .InvalidGeometry(error):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(error, into: &buf)
            
        
        case let .MalformedAnnotations(error):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(error, into: &buf)
            
        
        case let .InvalidStatusCode(code,description):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(code, into: &buf)
            FfiConverterOptionString.write(description, into: &buf)
            
        
        case .UnknownParsingError:
            writeInt(&buf, Int32(5))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeParsingError_lift(_ buf: RustBuffer) throws -> ParsingError {
    return try FfiConverterTypeParsingError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeParsingError_lower(_ value: ParsingError) -> RustBuffer {
    return FfiConverterTypeParsingError.lower(value)
}


extension ParsingError: Equatable, Hashable {}




extension ParsingError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Status information that describes whether the user is proceeding according to the route or not.
 *
 * Note that the name is intentionally a bit generic to allow for expansion of other states.
 * For example, we could conceivably add a "wrong way" status in the future.
 */

public enum RouteDeviation {
    
    /**
     * The user is proceeding on course within the expected tolerances; everything is normal.
     */
    case noDeviation
    /**
     * The user is off the expected route.
     */
    case offRoute(
        /**
         * The deviation from the route line, in meters.
         */deviationFromRouteLine: Double
    )
}


#if compiler(>=6)
extension RouteDeviation: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteDeviation: FfiConverterRustBuffer {
    typealias SwiftType = RouteDeviation

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteDeviation {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .noDeviation
        
        case 2: return .offRoute(deviationFromRouteLine: try FfiConverterDouble.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RouteDeviation, into buf: inout [UInt8]) {
        switch value {
        
        
        case .noDeviation:
            writeInt(&buf, Int32(1))
        
        
        case let .offRoute(deviationFromRouteLine):
            writeInt(&buf, Int32(2))
            FfiConverterDouble.write(deviationFromRouteLine, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteDeviation_lift(_ buf: RustBuffer) throws -> RouteDeviation {
    return try FfiConverterTypeRouteDeviation.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteDeviation_lower(_ value: RouteDeviation) -> RustBuffer {
    return FfiConverterTypeRouteDeviation.lower(value)
}


extension RouteDeviation: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Determines if the user has deviated from the expected route.
 */

public enum RouteDeviationTracking {
    
    /**
     * No checks will be done, and we assume the user is always following the route.
     */
    case none
    /**
     * Detects deviation from the route using a configurable static distance threshold from the route line.
     */
    case staticThreshold(
        /**
         * The minimum required horizontal accuracy of the user location, in meters.
         * Values larger than this will not trigger route deviation warnings.
         */minimumHorizontalAccuracy: UInt16, 
        /**
         * The maximum acceptable deviation from the route line, in meters.
         *
         * If the distance between the reported location and the expected route line
         * is greater than this threshold, it will be flagged as an off route condition.
         */maxAcceptableDeviation: Double
    )
    /**
     * An arbitrary user-defined implementation.
     * You decide with your own [`RouteDeviationDetector`] implementation!
     */
    case custom(detector: RouteDeviationDetector
    )
}


#if compiler(>=6)
extension RouteDeviationTracking: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteDeviationTracking: FfiConverterRustBuffer {
    typealias SwiftType = RouteDeviationTracking

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteDeviationTracking {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .none
        
        case 2: return .staticThreshold(minimumHorizontalAccuracy: try FfiConverterUInt16.read(from: &buf), maxAcceptableDeviation: try FfiConverterDouble.read(from: &buf)
        )
        
        case 3: return .custom(detector: try FfiConverterTypeRouteDeviationDetector.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RouteDeviationTracking, into buf: inout [UInt8]) {
        switch value {
        
        
        case .none:
            writeInt(&buf, Int32(1))
        
        
        case let .staticThreshold(minimumHorizontalAccuracy,maxAcceptableDeviation):
            writeInt(&buf, Int32(2))
            FfiConverterUInt16.write(minimumHorizontalAccuracy, into: &buf)
            FfiConverterDouble.write(maxAcceptableDeviation, into: &buf)
            
        
        case let .custom(detector):
            writeInt(&buf, Int32(3))
            FfiConverterTypeRouteDeviationDetector.write(detector, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteDeviationTracking_lift(_ buf: RustBuffer) throws -> RouteDeviationTracking {
    return try FfiConverterTypeRouteDeviationTracking.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteDeviationTracking_lower(_ value: RouteDeviationTracking) -> RustBuffer {
    return FfiConverterTypeRouteDeviationTracking.lower(value)
}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * A route request generated by a [`RouteRequestGenerator`].
 */

public enum RouteRequest {
    
    case httpPost(url: String, headers: [String: String], body: Data
    )
    case httpGet(url: String, headers: [String: String]
    )
}


#if compiler(>=6)
extension RouteRequest: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRouteRequest: FfiConverterRustBuffer {
    typealias SwiftType = RouteRequest

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RouteRequest {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .httpPost(url: try FfiConverterString.read(from: &buf), headers: try FfiConverterDictionaryStringString.read(from: &buf), body: try FfiConverterData.read(from: &buf)
        )
        
        case 2: return .httpGet(url: try FfiConverterString.read(from: &buf), headers: try FfiConverterDictionaryStringString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RouteRequest, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .httpPost(url,headers,body):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(url, into: &buf)
            FfiConverterDictionaryStringString.write(headers, into: &buf)
            FfiConverterData.write(body, into: &buf)
            
        
        case let .httpGet(url,headers):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(url, into: &buf)
            FfiConverterDictionaryStringString.write(headers, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteRequest_lift(_ buf: RustBuffer) throws -> RouteRequest {
    return try FfiConverterTypeRouteRequest.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRouteRequest_lower(_ value: RouteRequest) -> RustBuffer {
    return FfiConverterTypeRouteRequest.lower(value)
}


extension RouteRequest: Equatable, Hashable {}







public enum RoutingRequestGenerationError: Swift.Error {

    
    
    case NotEnoughWaypoints
    case JsonError
    case UnknownRequestGenerationError
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeRoutingRequestGenerationError: FfiConverterRustBuffer {
    typealias SwiftType = RoutingRequestGenerationError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RoutingRequestGenerationError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .NotEnoughWaypoints
        case 2: return .JsonError
        case 3: return .UnknownRequestGenerationError

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RoutingRequestGenerationError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case .NotEnoughWaypoints:
            writeInt(&buf, Int32(1))
        
        
        case .JsonError:
            writeInt(&buf, Int32(2))
        
        
        case .UnknownRequestGenerationError:
            writeInt(&buf, Int32(3))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRoutingRequestGenerationError_lift(_ buf: RustBuffer) throws -> RoutingRequestGenerationError {
    return try FfiConverterTypeRoutingRequestGenerationError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeRoutingRequestGenerationError_lower(_ value: RoutingRequestGenerationError) -> RustBuffer {
    return FfiConverterTypeRoutingRequestGenerationError.lower(value)
}


extension RoutingRequestGenerationError: Equatable, Hashable {}




extension RoutingRequestGenerationError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}





public enum SimulationError: Swift.Error {

    
    
    /**
     * Errors decoding the polyline string.
     */
    case PolylineError(error: String
    )
    /**
     * Not enough points in the input.
     */
    case NotEnoughPoints
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeSimulationError: FfiConverterRustBuffer {
    typealias SwiftType = SimulationError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SimulationError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .PolylineError(
            error: try FfiConverterString.read(from: &buf)
            )
        case 2: return .NotEnoughPoints

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: SimulationError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .PolylineError(error):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(error, into: &buf)
            
        
        case .NotEnoughPoints:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSimulationError_lift(_ buf: RustBuffer) throws -> SimulationError {
    return try FfiConverterTypeSimulationError.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeSimulationError_lower(_ value: SimulationError) -> RustBuffer {
    return FfiConverterTypeSimulationError.lower(value)
}


extension SimulationError: Equatable, Hashable {}




extension SimulationError: Foundation.LocalizedError {
    public var errorDescription: String? {
        String(reflecting: self)
    }
}




// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * The state of a navigation session.
 *
 * This is produced by [`NavigationController`](super::NavigationController) methods
 * including [`get_initial_state`](super::NavigationController::get_initial_state)
 * and [`update_user_location`](super::NavigationController::update_user_location).
 */

public enum TripState {
    
    /**
     * The navigation controller is idle and there is no active trip.
     */
    case idle(userLocation: UserLocation?
    )
    /**
     * The navigation controller is actively navigating a trip.
     */
    case navigating(
        /**
         * The index of the closest coordinate to the user's snapped location.
         *
         * This index is relative to the *current* [`RouteStep`]'s geometry.
         */currentStepGeometryIndex: UInt64?, 
        /**
         * The user's raw location.
         *
         * This is more useful than the snapped location when the user is off route,
         * or in special situations like pedestrian navigation.
         */userLocation: UserLocation, 
        /**
         * The user's location as if they were exactly on the route.
         *
         * This is derived by snapping the latitude and longitude to the closest point on the route line,
         * regardless of where they actually are.
         * This is desirable as it makes the navigation experience better for vehicular navigation,
         * removing GPS noise as long as the user is deemed to be on the route.
         *
         * All other properties from the [`UserLocation`], including speed and course,
         * are not affected by snapping.
         */snappedUserLocation: UserLocation, 
        /**
         * The ordered list of steps that remain in the trip.
         *
         * The step at the front of the list is always the current step.
         * We currently assume that you cannot move backward to a previous step.
         */remainingSteps: [RouteStep], 
        /**
         * Remaining waypoints to visit on the route.
         *
         * The waypoint at the front of the list is always the *next* waypoint "goal."
         * Unlike the current step, there is no value in tracking the "current" waypoint,
         * as the main use of waypoints is recalculation when the user deviates from the route.
         * (In most use cases, a route will have only two waypoints, but more complex use cases
         * may have multiple intervening points that are visited along the route.)
         * This list is updated as the user advances through the route.
         */remainingWaypoints: [Waypoint], 
        /**
         * The trip progress includes information that is useful for showing the
         * user's progress along the full navigation trip, the route and its components.
         */progress: TripProgress, 
        /**
         * Information pertaining to the user's full navigation trip. This includes
         * simple stats like total duration, and distance.
         */summary: TripSummary, 
        /**
         * The route deviation status: is the user following the route or not?
         */deviation: RouteDeviation, 
        /**
         * The visual instruction that should be displayed in the user interface.
         */visualInstruction: VisualInstruction?, 
        /**
         * The most recent spoken instruction that should be synthesized using TTS.
         *
         * Note it is the responsibility of the platform layer to ensure that utterances are not synthesized multiple times. This property simply reports the current spoken instruction.
         */spokenInstruction: SpokenInstruction?, 
        /**
         * Annotation data at the current location.
         * This is represented as a json formatted byte array to allow for flexible encoding of custom annotations.
         */annotationJson: String?
    )
    /**
     * The navigation controller has reached the end of the trip.
     */
    case complete(userLocation: UserLocation, 
        /**
         * Information pertaining to the user's full navigation trip. This includes
         * simple stats like total duration, and distance.
         */summary: TripSummary
    )
}


#if compiler(>=6)
extension TripState: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeTripState: FfiConverterRustBuffer {
    typealias SwiftType = TripState

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TripState {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .idle(userLocation: try FfiConverterOptionTypeUserLocation.read(from: &buf)
        )
        
        case 2: return .navigating(currentStepGeometryIndex: try FfiConverterOptionUInt64.read(from: &buf), userLocation: try FfiConverterTypeUserLocation.read(from: &buf), snappedUserLocation: try FfiConverterTypeUserLocation.read(from: &buf), remainingSteps: try FfiConverterSequenceTypeRouteStep.read(from: &buf), remainingWaypoints: try FfiConverterSequenceTypeWaypoint.read(from: &buf), progress: try FfiConverterTypeTripProgress.read(from: &buf), summary: try FfiConverterTypeTripSummary.read(from: &buf), deviation: try FfiConverterTypeRouteDeviation.read(from: &buf), visualInstruction: try FfiConverterOptionTypeVisualInstruction.read(from: &buf), spokenInstruction: try FfiConverterOptionTypeSpokenInstruction.read(from: &buf), annotationJson: try FfiConverterOptionString.read(from: &buf)
        )
        
        case 3: return .complete(userLocation: try FfiConverterTypeUserLocation.read(from: &buf), summary: try FfiConverterTypeTripSummary.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: TripState, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .idle(userLocation):
            writeInt(&buf, Int32(1))
            FfiConverterOptionTypeUserLocation.write(userLocation, into: &buf)
            
        
        case let .navigating(currentStepGeometryIndex,userLocation,snappedUserLocation,remainingSteps,remainingWaypoints,progress,summary,deviation,visualInstruction,spokenInstruction,annotationJson):
            writeInt(&buf, Int32(2))
            FfiConverterOptionUInt64.write(currentStepGeometryIndex, into: &buf)
            FfiConverterTypeUserLocation.write(userLocation, into: &buf)
            FfiConverterTypeUserLocation.write(snappedUserLocation, into: &buf)
            FfiConverterSequenceTypeRouteStep.write(remainingSteps, into: &buf)
            FfiConverterSequenceTypeWaypoint.write(remainingWaypoints, into: &buf)
            FfiConverterTypeTripProgress.write(progress, into: &buf)
            FfiConverterTypeTripSummary.write(summary, into: &buf)
            FfiConverterTypeRouteDeviation.write(deviation, into: &buf)
            FfiConverterOptionTypeVisualInstruction.write(visualInstruction, into: &buf)
            FfiConverterOptionTypeSpokenInstruction.write(spokenInstruction, into: &buf)
            FfiConverterOptionString.write(annotationJson, into: &buf)
            
        
        case let .complete(userLocation,summary):
            writeInt(&buf, Int32(3))
            FfiConverterTypeUserLocation.write(userLocation, into: &buf)
            FfiConverterTypeTripSummary.write(summary, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTripState_lift(_ buf: RustBuffer) throws -> TripState {
    return try FfiConverterTypeTripState.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeTripState_lower(_ value: TripState) -> RustBuffer {
    return FfiConverterTypeTripState.lower(value)
}


extension TripState: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Controls when a waypoint should be marked as complete.
 *
 * While a route may consist of thousands of points, waypoints are special.
 * A simple trip will have only one waypoint: the final destination.
 * A more complex trip may have several intermediate stops.
 * Just as the navigation state keeps track of which steps remain in the route,
 * it also tracks which waypoints are still remaining.
 *
 * Tracking waypoints enables Ferrostar to reroute users when they stray off the route line.
 * The waypoint advance mode specifies how the framework decides
 * that a waypoint has been visited (and is removed from the list).
 *
 * NOTE: Advancing to the next *step* and advancing to the next *waypoint*
 * are separate processes.
 * This will not normally cause any issues, but keep in mind that
 * manually advancing to the next step does not *necessarily* imply
 * that the waypoint will be marked as complete!
 */

public enum WaypointAdvanceMode {
    
    /**
     * Advance when the waypoint is within a certain range of meters from the user's location.
     */
    case waypointWithinRange(Double
    )
}


#if compiler(>=6)
extension WaypointAdvanceMode: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWaypointAdvanceMode: FfiConverterRustBuffer {
    typealias SwiftType = WaypointAdvanceMode

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WaypointAdvanceMode {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .waypointWithinRange(try FfiConverterDouble.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WaypointAdvanceMode, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .waypointWithinRange(v1):
            writeInt(&buf, Int32(1))
            FfiConverterDouble.write(v1, into: &buf)
            
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWaypointAdvanceMode_lift(_ buf: RustBuffer) throws -> WaypointAdvanceMode {
    return try FfiConverterTypeWaypointAdvanceMode.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWaypointAdvanceMode_lower(_ value: WaypointAdvanceMode) -> RustBuffer {
    return FfiConverterTypeWaypointAdvanceMode.lower(value)
}


extension WaypointAdvanceMode: Equatable, Hashable {}






// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
/**
 * Describes characteristics of the waypoint for the routing backend.
 */

public enum WaypointKind {
    
    /**
     * Starts or ends a leg of the trip.
     *
     * Most routing engines will generate arrival and departure instructions.
     */
    case `break`
    /**
     * A waypoint that is simply passed through, but will not have any arrival or departure instructions.
     */
    case via
}


#if compiler(>=6)
extension WaypointKind: Sendable {}
#endif

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeWaypointKind: FfiConverterRustBuffer {
    typealias SwiftType = WaypointKind

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WaypointKind {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`break`
        
        case 2: return .via
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WaypointKind, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`break`:
            writeInt(&buf, Int32(1))
        
        
        case .via:
            writeInt(&buf, Int32(2))
        
        }
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWaypointKind_lift(_ buf: RustBuffer) throws -> WaypointKind {
    return try FfiConverterTypeWaypointKind.lift(buf)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeWaypointKind_lower(_ value: WaypointKind) -> RustBuffer {
    return FfiConverterTypeWaypointKind.lower(value)
}


extension WaypointKind: Equatable, Hashable {}






#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt16: FfiConverterRustBuffer {
    typealias SwiftType = UInt16?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt16.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt16.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionDouble: FfiConverterRustBuffer {
    typealias SwiftType = Double?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDouble.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDouble.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterBool.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeBoundingBox: FfiConverterRustBuffer {
    typealias SwiftType = BoundingBox?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeBoundingBox.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeBoundingBox.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeCongestion: FfiConverterRustBuffer {
    typealias SwiftType = Congestion?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCongestion.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCongestion.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeCourseOverGround: FfiConverterRustBuffer {
    typealias SwiftType = CourseOverGround?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeCourseOverGround.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCourseOverGround.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeRouteStep: FfiConverterRustBuffer {
    typealias SwiftType = RouteStep?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeRouteStep.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeRouteStep.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeSpeed: FfiConverterRustBuffer {
    typealias SwiftType = Speed?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSpeed.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSpeed.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeSpokenInstruction: FfiConverterRustBuffer {
    typealias SwiftType = SpokenInstruction?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeSpokenInstruction.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeSpokenInstruction.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeUserLocation: FfiConverterRustBuffer {
    typealias SwiftType = UserLocation?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeUserLocation.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeUserLocation.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeVisualInstruction: FfiConverterRustBuffer {
    typealias SwiftType = VisualInstruction?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeVisualInstruction.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeVisualInstruction.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeVisualInstructionContent: FfiConverterRustBuffer {
    typealias SwiftType = VisualInstructionContent?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeVisualInstructionContent.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeVisualInstructionContent.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeImpact: FfiConverterRustBuffer {
    typealias SwiftType = Impact?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeImpact.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeImpact.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeManeuverModifier: FfiConverterRustBuffer {
    typealias SwiftType = ManeuverModifier?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeManeuverModifier.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeManeuverModifier.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeManeuverType: FfiConverterRustBuffer {
    typealias SwiftType = ManeuverType?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeManeuverType.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeManeuverType.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeLaneInfo: FfiConverterRustBuffer {
    typealias SwiftType = [LaneInfo]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeLaneInfo.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeLaneInfo.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionSequenceTypeNavigationRecordingEvent: FfiConverterRustBuffer {
    typealias SwiftType = [NavigationRecordingEvent]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceTypeNavigationRecordingEvent.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceTypeNavigationRecordingEvent.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterOptionTypeUtcDateTime: FfiConverterRustBuffer {
    typealias SwiftType = UtcDateTime?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeUtcDateTime.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeUtcDateTime.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeStepAdvanceCondition: FfiConverterRustBuffer {
    typealias SwiftType = [StepAdvanceCondition]

    public static func write(_ value: [StepAdvanceCondition], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeStepAdvanceCondition.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [StepAdvanceCondition] {
        let len: Int32 = try readInt(&buf)
        var seq = [StepAdvanceCondition]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeStepAdvanceCondition.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeGeographicCoordinate: FfiConverterRustBuffer {
    typealias SwiftType = [GeographicCoordinate]

    public static func write(_ value: [GeographicCoordinate], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeGeographicCoordinate.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [GeographicCoordinate] {
        let len: Int32 = try readInt(&buf)
        var seq = [GeographicCoordinate]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeGeographicCoordinate.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeIncident: FfiConverterRustBuffer {
    typealias SwiftType = [Incident]

    public static func write(_ value: [Incident], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeIncident.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Incident] {
        let len: Int32 = try readInt(&buf)
        var seq = [Incident]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeIncident.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeLaneInfo: FfiConverterRustBuffer {
    typealias SwiftType = [LaneInfo]

    public static func write(_ value: [LaneInfo], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeLaneInfo.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [LaneInfo] {
        let len: Int32 = try readInt(&buf)
        var seq = [LaneInfo]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeLaneInfo.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeNavigationRecordingEvent: FfiConverterRustBuffer {
    typealias SwiftType = [NavigationRecordingEvent]

    public static func write(_ value: [NavigationRecordingEvent], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeNavigationRecordingEvent.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [NavigationRecordingEvent] {
        let len: Int32 = try readInt(&buf)
        var seq = [NavigationRecordingEvent]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeNavigationRecordingEvent.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeRoute: FfiConverterRustBuffer {
    typealias SwiftType = [Route]

    public static func write(_ value: [Route], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRoute.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Route] {
        let len: Int32 = try readInt(&buf)
        var seq = [Route]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRoute.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeRouteStep: FfiConverterRustBuffer {
    typealias SwiftType = [RouteStep]

    public static func write(_ value: [RouteStep], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeRouteStep.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [RouteStep] {
        let len: Int32 = try readInt(&buf)
        var seq = [RouteStep]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRouteStep.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeSpokenInstruction: FfiConverterRustBuffer {
    typealias SwiftType = [SpokenInstruction]

    public static func write(_ value: [SpokenInstruction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeSpokenInstruction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [SpokenInstruction] {
        let len: Int32 = try readInt(&buf)
        var seq = [SpokenInstruction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeSpokenInstruction.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeVisualInstruction: FfiConverterRustBuffer {
    typealias SwiftType = [VisualInstruction]

    public static func write(_ value: [VisualInstruction], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeVisualInstruction.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [VisualInstruction] {
        let len: Int32 = try readInt(&buf)
        var seq = [VisualInstruction]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeVisualInstruction.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeWaypoint: FfiConverterRustBuffer {
    typealias SwiftType = [Waypoint]

    public static func write(_ value: [Waypoint], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeWaypoint.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Waypoint] {
        let len: Int32 = try readInt(&buf)
        var seq = [Waypoint]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeWaypoint.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterSequenceTypeBlockedLane: FfiConverterRustBuffer {
    typealias SwiftType = [BlockedLane]

    public static func write(_ value: [BlockedLane], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeBlockedLane.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [BlockedLane] {
        let len: Int32 = try readInt(&buf)
        var seq = [BlockedLane]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeBlockedLane.read(from: &buf))
        }
        return seq
    }
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
fileprivate struct FfiConverterDictionaryStringString: FfiConverterRustBuffer {
    public static func write(_ value: [String: String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterString.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: String] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: String]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterString.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}




/**
 * Typealias from the type name used in the UDL file to the custom type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias UtcDateTime = Date

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUtcDateTime: FfiConverter {

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UtcDateTime {
        let builtinValue = try FfiConverterInt64.read(from: &buf)
        return Date(timeIntervalSince1970: Double(builtinValue) / 1000.0)
    }

    public static func write(_ value: UtcDateTime, into buf: inout [UInt8]) {
        let builtinValue = Int64(value.timeIntervalSince1970 * 1000)
        return FfiConverterInt64.write(builtinValue, into: &buf)
    }

    public static func lift(_ value: Int64) throws -> UtcDateTime {
        let builtinValue = try FfiConverterInt64.lift(value)
        return Date(timeIntervalSince1970: Double(builtinValue) / 1000.0)
    }

    public static func lower(_ value: UtcDateTime) -> Int64 {
        let builtinValue = Int64(value.timeIntervalSince1970 * 1000)
        return FfiConverterInt64.lower(builtinValue)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUtcDateTime_lift(_ value: Int64) throws -> UtcDateTime {
    return try FfiConverterTypeUtcDateTime.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUtcDateTime_lower(_ value: UtcDateTime) -> Int64 {
    return FfiConverterTypeUtcDateTime.lower(value)
}





/**
 * Typealias from the type name used in the UDL file to the custom type.  This
 * is needed because the UDL type name is used in function/method signatures.
 */
public typealias Uuid = UUID

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public struct FfiConverterTypeUuid: FfiConverter {

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Uuid {
        let builtinValue = try FfiConverterString.read(from: &buf)
        return UUID(uuidString: builtinValue)!
    }

    public static func write(_ value: Uuid, into buf: inout [UInt8]) {
        let builtinValue = value.uuidString
        return FfiConverterString.write(builtinValue, into: &buf)
    }

    public static func lift(_ value: RustBuffer) throws -> Uuid {
        let builtinValue = try FfiConverterString.lift(value)
        return UUID(uuidString: builtinValue)!
    }

    public static func lower(_ value: Uuid) -> RustBuffer {
        let builtinValue = value.uuidString
        return FfiConverterString.lower(builtinValue)
    }
}


#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUuid_lift(_ value: RustBuffer) throws -> Uuid {
    return try FfiConverterTypeUuid.lift(value)
}

#if swift(>=5.8)
@_documentation(visibility: private)
#endif
public func FfiConverterTypeUuid_lower(_ value: Uuid) -> RustBuffer {
    return FfiConverterTypeUuid.lower(value)
}

/**
 * Returns the next simulation state based on the desired strategy.
 * Results of this can be thought of like a stream from a generator function.
 *
 * This function is intended to be called once/second.
 * However, the caller may vary speed to purposefully replay at a faster rate
 * (ex: calling 3x per second will be a triple speed simulation).
 *
 * When there are now more locations to visit, returns the same state forever.
 */
public func advanceLocationSimulation(state: LocationSimulationState) -> LocationSimulationState  {
    return try!  FfiConverterTypeLocationSimulationState_lift(try! rustCall() {
    uniffi_ferrostar_fn_func_advance_location_simulation(
        FfiConverterTypeLocationSimulationState_lower(state),$0
    )
})
}
public func createFerrostarLogger()  {try! rustCall() {
    uniffi_ferrostar_fn_func_create_ferrostar_logger($0
    )
}
}
/**
 * Creates a new navigation controller for the given route and configuration.
 *
 * It returns an Arc-wrapped trait object implementing `Navigator`.
 * If `should_record` is true, it creates a controller with event recording enabled.
 */
public func createNavigator(route: Route, config: NavigationControllerConfig, shouldRecord: Bool) -> Navigator  {
    return try!  FfiConverterTypeNavigator_lift(try! rustCall() {
    uniffi_ferrostar_fn_func_create_navigator(
        FfiConverterTypeRoute_lower(route),
        FfiConverterTypeNavigationControllerConfig_lower(config),
        FfiConverterBool.lower(shouldRecord),$0
    )
})
}
/**
 * Creates a [`RouteResponseParser`] capable of parsing OSRM responses.
 *
 * This response parser is designed to be fairly flexible,
 * supporting both vanilla OSRM and enhanced Valhalla (ex: from Stadia Maps and Mapbox) outputs
 * which contain richer information like banners and voice instructions for navigation.
 */
public func createOsrmResponseParser(polylinePrecision: UInt32) -> RouteResponseParser  {
    return try!  FfiConverterTypeRouteResponseParser_lift(try! rustCall() {
    uniffi_ferrostar_fn_func_create_osrm_response_parser(
        FfiConverterUInt32.lower(polylinePrecision),$0
    )
})
}
/**
 * Creates a [`Route`] from OSRM data.
 *
 * This uses the same logic as the [`OsrmResponseParser`] and is designed to be fairly flexible,
 * supporting both vanilla OSRM and enhanced Valhalla (ex: from Stadia Maps and Mapbox) outputs
 * which contain richer information like banners and voice instructions for navigation.
 */
public func createRouteFromOsrm(routeData: Data, waypointData: Data, polylinePrecision: UInt32)throws  -> Route  {
    return try  FfiConverterTypeRoute_lift(try rustCallWithError(FfiConverterTypeParsingError_lift) {
    uniffi_ferrostar_fn_func_create_route_from_osrm(
        FfiConverterData.lower(routeData),
        FfiConverterData.lower(waypointData),
        FfiConverterUInt32.lower(polylinePrecision),$0
    )
})
}
/**
 * Creates a [`Route`] from OSRM route data and ferrostar waypoints.
 *
 * This uses the same logic as the [`OsrmResponseParser`] and is designed to be fairly flexible,
 * supporting both vanilla OSRM and enhanced Valhalla (ex: from Stadia Maps and Mapbox) outputs
 * which contain richer information like banners and voice instructions for navigation.
 */
public func createRouteFromOsrmRoute(routeData: Data, waypoints: [Waypoint], polylinePrecision: UInt32)throws  -> Route  {
    return try  FfiConverterTypeRoute_lift(try rustCallWithError(FfiConverterTypeParsingError_lift) {
    uniffi_ferrostar_fn_func_create_route_from_osrm_route(
        FfiConverterData.lower(routeData),
        FfiConverterSequenceTypeWaypoint.lower(waypoints),
        FfiConverterUInt32.lower(polylinePrecision),$0
    )
})
}
/**
 * Creates a [`RouteRequestGenerator`]
 * which generates requests to an arbitrary Valhalla server (using the OSRM response format).
 *
 * This is provided as a convenience for use from foreign code when creating your own [`routing_adapters::RouteAdapter`].
 */
public func createValhallaRequestGenerator(endpointUrl: String, profile: String, optionsJson: String?)throws  -> RouteRequestGenerator  {
    return try  FfiConverterTypeRouteRequestGenerator_lift(try rustCallWithError(FfiConverterTypeInstantiationError_lift) {
    uniffi_ferrostar_fn_func_create_valhalla_request_generator(
        FfiConverterString.lower(endpointUrl),
        FfiConverterString.lower(profile),
        FfiConverterOptionString.lower(optionsJson),$0
    )
})
}
/**
 * Helper function for getting the route as an encoded polyline.
 *
 * Mostly used for debugging.
 */
public func getRoutePolyline(route: Route, precision: UInt32)throws  -> String  {
    return try  FfiConverterString.lift(try rustCallWithError(FfiConverterTypeModelError_lift) {
    uniffi_ferrostar_fn_func_get_route_polyline(
        FfiConverterTypeRoute_lower(route),
        FfiConverterUInt32.lower(precision),$0
    )
})
}
/**
 * Creates a location simulation from a set of coordinates.
 *
 * Optionally resamples the input line so that there is a maximum distance between points.
 */
public func locationSimulationFromCoordinates(coordinates: [GeographicCoordinate], resampleDistance: Double?, bias: LocationBias)throws  -> LocationSimulationState  {
    return try  FfiConverterTypeLocationSimulationState_lift(try rustCallWithError(FfiConverterTypeSimulationError_lift) {
    uniffi_ferrostar_fn_func_location_simulation_from_coordinates(
        FfiConverterSequenceTypeGeographicCoordinate.lower(coordinates),
        FfiConverterOptionDouble.lower(resampleDistance),
        FfiConverterTypeLocationBias_lower(bias),$0
    )
})
}
/**
 * Creates a location simulation from a polyline.
 *
 * Optionally resamples the input line so that there is no more than the specified maximum distance between points.
 */
public func locationSimulationFromPolyline(polyline: String, precision: UInt32, resampleDistance: Double?, bias: LocationBias)throws  -> LocationSimulationState  {
    return try  FfiConverterTypeLocationSimulationState_lift(try rustCallWithError(FfiConverterTypeSimulationError_lift) {
    uniffi_ferrostar_fn_func_location_simulation_from_polyline(
        FfiConverterString.lower(polyline),
        FfiConverterUInt32.lower(precision),
        FfiConverterOptionDouble.lower(resampleDistance),
        FfiConverterTypeLocationBias_lower(bias),$0
    )
})
}
/**
 * Creates a location simulation from a route.
 *
 * Optionally resamples the route geometry so that there is no more than the specified maximum distance between points.
 */
public func locationSimulationFromRoute(route: Route, resampleDistance: Double?, bias: LocationBias)throws  -> LocationSimulationState  {
    return try  FfiConverterTypeLocationSimulationState_lift(try rustCallWithError(FfiConverterTypeSimulationError_lift) {
    uniffi_ferrostar_fn_func_location_simulation_from_route(
        FfiConverterTypeRoute_lower(route),
        FfiConverterOptionDouble.lower(resampleDistance),
        FfiConverterTypeLocationBias_lower(bias),$0
    )
})
}
/**
 * Convenience function for creating an [`AndAdvanceConditions`].
 *
 * This composes multiple conditions together and advances to the next step if ALL of them trigger.
 */
public func stepAdvanceAnd(conditions: [StepAdvanceCondition]) -> StepAdvanceCondition  {
    return try!  FfiConverterTypeStepAdvanceCondition_lift(try! rustCall() {
    uniffi_ferrostar_fn_func_step_advance_and(
        FfiConverterSequenceTypeStepAdvanceCondition.lower(conditions),$0
    )
})
}
/**
 * Convenience function for creating a [`DistanceEntryAndExitCondition`].
 *
 * Requires the user to first travel within `distance_to_end_of_step` meters of the end of the step,
 * and then travel at least `distance_after_end_of_step` meters away from the step geometry.
 * This ensures the user completes the maneuver before advancing to the next step.
 */
public func stepAdvanceDistanceEntryAndExit(distanceToEndOfStep: UInt16, distanceAfterEndOfStep: UInt16, minimumHorizontalAccuracy: UInt16) -> StepAdvanceCondition  {
    return try!  FfiConverterTypeStepAdvanceCondition_lift(try! rustCall() {
    uniffi_ferrostar_fn_func_step_advance_distance_entry_and_exit(
        FfiConverterUInt16.lower(distanceToEndOfStep),
        FfiConverterUInt16.lower(distanceAfterEndOfStep),
        FfiConverterUInt16.lower(minimumHorizontalAccuracy),$0
    )
})
}
/**
 * Convenience function for creating a [`DistanceFromStepCondition`].
 *
 * This advances to the next step when the user is at least `distance` meters away _from_ any point on the current route step geometry.
 * Does not advance unless the reported location accuracy is `minimum_horizontal_accuracy` meters or better.
 */
public func stepAdvanceDistanceFromStep(distance: UInt16, minimumHorizontalAccuracy: UInt16) -> StepAdvanceCondition  {
    return try!  FfiConverterTypeStepAdvanceCondition_lift(try! rustCall() {
    uniffi_ferrostar_fn_func_step_advance_distance_from_step(
        FfiConverterUInt16.lower(distance),
        FfiConverterUInt16.lower(minimumHorizontalAccuracy),$0
    )
})
}
/**
 * Convenience function for creating a [`DistanceToEndOfStepCondition`].
 *
 * This advances to the next step when the user is within `distance` meters of the last point in the current route step.
 * Does not advance unless the reported location accuracy is `minimum_horizontal_accuracy` meters or better.
 */
public func stepAdvanceDistanceToEndOfStep(distance: UInt16, minimumHorizontalAccuracy: UInt16) -> StepAdvanceCondition  {
    return try!  FfiConverterTypeStepAdvanceCondition_lift(try! rustCall() {
    uniffi_ferrostar_fn_func_step_advance_distance_to_end_of_step(
        FfiConverterUInt16.lower(distance),
        FfiConverterUInt16.lower(minimumHorizontalAccuracy),$0
    )
})
}
/**
 * Convenience function for creating a [`ManualStepCondition`].
 *
 * This never advances to the next step automatically.
 * You must manually advance to the next step programmatically using a FerrostarCore
 * platform wrapper or by calling [`super::Navigator::advance_to_next_step`] manually.
 */
public func stepAdvanceManual() -> StepAdvanceCondition  {
    return try!  FfiConverterTypeStepAdvanceCondition_lift(try! rustCall() {
    uniffi_ferrostar_fn_func_step_advance_manual($0
    )
})
}
/**
 * Convenience function for creating an [`OrAdvanceConditions`].
 *
 * This composes multiple conditions together and advances to the next step if ANY of them trigger.
 */
public func stepAdvanceOr(conditions: [StepAdvanceCondition]) -> StepAdvanceCondition  {
    return try!  FfiConverterTypeStepAdvanceCondition_lift(try! rustCall() {
    uniffi_ferrostar_fn_func_step_advance_or(
        FfiConverterSequenceTypeStepAdvanceCondition.lower(conditions),$0
    )
})
}

private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variable to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private let initializationResult: InitializationResult = {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_ferrostar_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_ferrostar_checksum_func_advance_location_simulation() != 26307) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_create_ferrostar_logger() != 18551) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_create_navigator() != 1507) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_create_osrm_response_parser() != 16550) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_create_route_from_osrm() != 42270) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_create_route_from_osrm_route() != 43326) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_create_valhalla_request_generator() != 16275) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_get_route_polyline() != 31480) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_location_simulation_from_coordinates() != 52416) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_location_simulation_from_polyline() != 14615) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_location_simulation_from_route() != 39027) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_step_advance_and() != 55830) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_step_advance_distance_entry_and_exit() != 48000) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_step_advance_distance_from_step() != 42108) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_step_advance_distance_to_end_of_step() != 39292) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_step_advance_manual() != 14605) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_func_step_advance_or() != 26194) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_navigator_get_initial_state() != 17041) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_navigator_advance_to_next_step() != 54768) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_navigator_update_user_location() != 30110) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_routeadapter_generate_request() != 59034) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_routeadapter_parse_response() != 34481) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_routedeviationdetector_check_route_deviation() != 50476) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_routerequestgenerator_generate_request() != 63458) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_routeresponseparser_parse_response() != 44735) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_method_stepadvancecondition_should_advance_step() != 27532) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_constructor_navigationcontroller_new() != 60881) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_constructor_routeadapter_new() != 32290) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_ferrostar_checksum_constructor_routeadapter_new_valhalla_http() != 3524) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitRouteDeviationDetector()
    uniffiCallbackInitRouteRequestGenerator()
    uniffiCallbackInitRouteResponseParser()
    return InitializationResult.ok
}()

// Make the ensure init function public so that other modules which have external type references to
// our types can call it.
public func uniffiEnsureFerrostarInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// swiftlint:enable all