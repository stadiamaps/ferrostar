// This file was autogenerated by some hot garbage in the
// `uniffi-bindgen-react-native` crate. Trust me, you don't want to mess with
// it!
#include "ferrostar.hpp"

#include "UniffiJsiTypes.h"
#include <iostream>
#include <map>
#include <stdexcept>
#include <thread>
#include <utility>

namespace react = facebook::react;
namespace jsi = facebook::jsi;

// Calling into Rust.
extern "C" {
typedef void (*UniffiRustFutureContinuationCallback)(uint64_t data,
                                                     int8_t poll_result);
typedef void (*UniffiForeignFutureFree)(uint64_t handle);
typedef void (*UniffiCallbackInterfaceFree)(uint64_t handle);
typedef struct UniffiForeignFuture {
  uint64_t handle;
  UniffiForeignFutureFree free;
} UniffiForeignFuture;
typedef struct UniffiForeignFutureStructU8 {
  uint8_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU8;
typedef void (*UniffiForeignFutureCompleteU8)(
    uint64_t callback_data, UniffiForeignFutureStructU8 result);
typedef struct UniffiForeignFutureStructI8 {
  int8_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI8;
typedef void (*UniffiForeignFutureCompleteI8)(
    uint64_t callback_data, UniffiForeignFutureStructI8 result);
typedef struct UniffiForeignFutureStructU16 {
  uint16_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU16;
typedef void (*UniffiForeignFutureCompleteU16)(
    uint64_t callback_data, UniffiForeignFutureStructU16 result);
typedef struct UniffiForeignFutureStructI16 {
  int16_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI16;
typedef void (*UniffiForeignFutureCompleteI16)(
    uint64_t callback_data, UniffiForeignFutureStructI16 result);
typedef struct UniffiForeignFutureStructU32 {
  uint32_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU32;
typedef void (*UniffiForeignFutureCompleteU32)(
    uint64_t callback_data, UniffiForeignFutureStructU32 result);
typedef struct UniffiForeignFutureStructI32 {
  int32_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI32;
typedef void (*UniffiForeignFutureCompleteI32)(
    uint64_t callback_data, UniffiForeignFutureStructI32 result);
typedef struct UniffiForeignFutureStructU64 {
  uint64_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructU64;
typedef void (*UniffiForeignFutureCompleteU64)(
    uint64_t callback_data, UniffiForeignFutureStructU64 result);
typedef struct UniffiForeignFutureStructI64 {
  int64_t return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructI64;
typedef void (*UniffiForeignFutureCompleteI64)(
    uint64_t callback_data, UniffiForeignFutureStructI64 result);
typedef struct UniffiForeignFutureStructF32 {
  float return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructF32;
typedef void (*UniffiForeignFutureCompleteF32)(
    uint64_t callback_data, UniffiForeignFutureStructF32 result);
typedef struct UniffiForeignFutureStructF64 {
  double return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructF64;
typedef void (*UniffiForeignFutureCompleteF64)(
    uint64_t callback_data, UniffiForeignFutureStructF64 result);
typedef struct UniffiForeignFutureStructPointer {
  void *return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructPointer;
typedef void (*UniffiForeignFutureCompletePointer)(
    uint64_t callback_data, UniffiForeignFutureStructPointer result);
typedef struct UniffiForeignFutureStructRustBuffer {
  RustBuffer return_value;
  RustCallStatus call_status;
} UniffiForeignFutureStructRustBuffer;
typedef void (*UniffiForeignFutureCompleteRustBuffer)(
    uint64_t callback_data, UniffiForeignFutureStructRustBuffer result);
typedef struct UniffiForeignFutureStructVoid {
  RustCallStatus call_status;
} UniffiForeignFutureStructVoid;
typedef void (*UniffiForeignFutureCompleteVoid)(
    uint64_t callback_data, UniffiForeignFutureStructVoid result);
typedef void (*UniffiCallbackInterfaceRouteDeviationDetectorMethod0)(
    uint64_t uniffi_handle, RustBuffer location, RustBuffer route,
    RustBuffer current_route_step, RustBuffer *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceRouteRequestGeneratorMethod0)(
    uint64_t uniffi_handle, RustBuffer user_location, RustBuffer waypoints,
    RustBuffer *uniffi_out_return, RustCallStatus *rust_call_status);
typedef void (*UniffiCallbackInterfaceRouteResponseParserMethod0)(
    uint64_t uniffi_handle, RustBuffer response, RustBuffer *uniffi_out_return,
    RustCallStatus *rust_call_status);
typedef struct UniffiVTableCallbackInterfaceRouteDeviationDetector {
  UniffiCallbackInterfaceRouteDeviationDetectorMethod0 check_route_deviation;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceRouteDeviationDetector;
typedef struct UniffiVTableCallbackInterfaceRouteRequestGenerator {
  UniffiCallbackInterfaceRouteRequestGeneratorMethod0 generate_request;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceRouteRequestGenerator;
typedef struct UniffiVTableCallbackInterfaceRouteResponseParser {
  UniffiCallbackInterfaceRouteResponseParserMethod0 parse_response;
  UniffiCallbackInterfaceFree uniffi_free;
} UniffiVTableCallbackInterfaceRouteResponseParser;
void *
uniffi_ferrostar_fn_clone_navigationcontroller(void *ptr,
                                               RustCallStatus *uniffi_out_err);
void uniffi_ferrostar_fn_free_navigationcontroller(
    void *ptr, RustCallStatus *uniffi_out_err);
void *uniffi_ferrostar_fn_constructor_navigationcontroller_new(
    RustBuffer route, RustBuffer config, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_ferrostar_fn_method_navigationcontroller_advance_to_next_step(
    void *ptr, RustBuffer state, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_ferrostar_fn_method_navigationcontroller_get_initial_state(
    void *ptr, RustBuffer location, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_ferrostar_fn_method_navigationcontroller_update_user_location(
    void *ptr, RustBuffer location, RustBuffer state,
    RustCallStatus *uniffi_out_err);
void *uniffi_ferrostar_fn_clone_routeadapter(void *ptr,
                                             RustCallStatus *uniffi_out_err);
void uniffi_ferrostar_fn_free_routeadapter(void *ptr,
                                           RustCallStatus *uniffi_out_err);
void *uniffi_ferrostar_fn_constructor_routeadapter_new(
    void *request_generator, void *response_parser,
    RustCallStatus *uniffi_out_err);
void *uniffi_ferrostar_fn_constructor_routeadapter_new_valhalla_http(
    RustBuffer endpoint_url, RustBuffer profile, RustBuffer options_json,
    RustCallStatus *uniffi_out_err);
RustBuffer uniffi_ferrostar_fn_method_routeadapter_generate_request(
    void *ptr, RustBuffer user_location, RustBuffer waypoints,
    RustCallStatus *uniffi_out_err);
RustBuffer uniffi_ferrostar_fn_method_routeadapter_parse_response(
    void *ptr, RustBuffer response, RustCallStatus *uniffi_out_err);
void *uniffi_ferrostar_fn_clone_routedeviationdetector(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_ferrostar_fn_free_routedeviationdetector(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_ferrostar_fn_init_callback_vtable_routedeviationdetector(
    UniffiVTableCallbackInterfaceRouteDeviationDetector *vtable);
RustBuffer
uniffi_ferrostar_fn_method_routedeviationdetector_check_route_deviation(
    void *ptr, RustBuffer location, RustBuffer route,
    RustBuffer current_route_step, RustCallStatus *uniffi_out_err);
void *
uniffi_ferrostar_fn_clone_routerequestgenerator(void *ptr,
                                                RustCallStatus *uniffi_out_err);
void uniffi_ferrostar_fn_free_routerequestgenerator(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_ferrostar_fn_init_callback_vtable_routerequestgenerator(
    UniffiVTableCallbackInterfaceRouteRequestGenerator *vtable);
RustBuffer uniffi_ferrostar_fn_method_routerequestgenerator_generate_request(
    void *ptr, RustBuffer user_location, RustBuffer waypoints,
    RustCallStatus *uniffi_out_err);
void *
uniffi_ferrostar_fn_clone_routeresponseparser(void *ptr,
                                              RustCallStatus *uniffi_out_err);
void uniffi_ferrostar_fn_free_routeresponseparser(
    void *ptr, RustCallStatus *uniffi_out_err);
void uniffi_ferrostar_fn_init_callback_vtable_routeresponseparser(
    UniffiVTableCallbackInterfaceRouteResponseParser *vtable);
RustBuffer uniffi_ferrostar_fn_method_routeresponseparser_parse_response(
    void *ptr, RustBuffer response, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_ferrostar_fn_func_advance_location_simulation(
    RustBuffer state, RustCallStatus *uniffi_out_err);
void uniffi_ferrostar_fn_func_create_ferrostar_logger(
    RustCallStatus *uniffi_out_err);
void *uniffi_ferrostar_fn_func_create_osrm_response_parser(
    uint32_t polyline_precision, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_ferrostar_fn_func_create_route_from_osrm(
    RustBuffer route_data, RustBuffer waypoint_data,
    uint32_t polyline_precision, RustCallStatus *uniffi_out_err);
void *uniffi_ferrostar_fn_func_create_valhalla_request_generator(
    RustBuffer endpoint_url, RustBuffer profile, RustBuffer options_json,
    RustCallStatus *uniffi_out_err);
RustBuffer uniffi_ferrostar_fn_func_get_route_polyline(
    RustBuffer route, uint32_t precision, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_ferrostar_fn_func_location_simulation_from_coordinates(
    RustBuffer coordinates, RustBuffer resample_distance, RustBuffer bias,
    RustCallStatus *uniffi_out_err);
RustBuffer uniffi_ferrostar_fn_func_location_simulation_from_polyline(
    RustBuffer polyline, uint32_t precision, RustBuffer resample_distance,
    RustBuffer bias, RustCallStatus *uniffi_out_err);
RustBuffer uniffi_ferrostar_fn_func_location_simulation_from_route(
    RustBuffer route, RustBuffer resample_distance, RustBuffer bias,
    RustCallStatus *uniffi_out_err);
RustBuffer ffi_ferrostar_rustbuffer_alloc(uint64_t size,
                                          RustCallStatus *uniffi_out_err);
RustBuffer ffi_ferrostar_rustbuffer_from_bytes(ForeignBytes bytes,
                                               RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rustbuffer_free(RustBuffer buf,
                                   RustCallStatus *uniffi_out_err);
RustBuffer ffi_ferrostar_rustbuffer_reserve(RustBuffer buf, uint64_t additional,
                                            RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_u8(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_u8(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_u8(
    /*handle*/ uint64_t handle);
uint8_t ffi_ferrostar_rust_future_complete_u8(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_i8(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_i8(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_i8(
    /*handle*/ uint64_t handle);
int8_t ffi_ferrostar_rust_future_complete_i8(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_u16(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_u16(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_u16(
    /*handle*/ uint64_t handle);
uint16_t ffi_ferrostar_rust_future_complete_u16(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_i16(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_i16(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_i16(
    /*handle*/ uint64_t handle);
int16_t ffi_ferrostar_rust_future_complete_i16(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_u32(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_u32(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_u32(
    /*handle*/ uint64_t handle);
uint32_t ffi_ferrostar_rust_future_complete_u32(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_i32(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_i32(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_i32(
    /*handle*/ uint64_t handle);
int32_t ffi_ferrostar_rust_future_complete_i32(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_u64(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_u64(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_u64(
    /*handle*/ uint64_t handle);
uint64_t ffi_ferrostar_rust_future_complete_u64(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_i64(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_i64(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_i64(
    /*handle*/ uint64_t handle);
int64_t ffi_ferrostar_rust_future_complete_i64(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_f32(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_f32(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_f32(
    /*handle*/ uint64_t handle);
float ffi_ferrostar_rust_future_complete_f32(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_f64(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_f64(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_f64(
    /*handle*/ uint64_t handle);
double ffi_ferrostar_rust_future_complete_f64(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_pointer(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_pointer(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_pointer(
    /*handle*/ uint64_t handle);
void *ffi_ferrostar_rust_future_complete_pointer(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_rust_buffer(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_rust_buffer(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_rust_buffer(
    /*handle*/ uint64_t handle);
RustBuffer ffi_ferrostar_rust_future_complete_rust_buffer(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
void ffi_ferrostar_rust_future_poll_void(
    /*handle*/ uint64_t handle, UniffiRustFutureContinuationCallback callback,
    /*handle*/ uint64_t callback_data);
void ffi_ferrostar_rust_future_cancel_void(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_free_void(
    /*handle*/ uint64_t handle);
void ffi_ferrostar_rust_future_complete_void(
    /*handle*/ uint64_t handle, RustCallStatus *uniffi_out_err);
uint16_t uniffi_ferrostar_checksum_func_advance_location_simulation();
uint16_t uniffi_ferrostar_checksum_func_create_ferrostar_logger();
uint16_t uniffi_ferrostar_checksum_func_create_osrm_response_parser();
uint16_t uniffi_ferrostar_checksum_func_create_route_from_osrm();
uint16_t uniffi_ferrostar_checksum_func_create_valhalla_request_generator();
uint16_t uniffi_ferrostar_checksum_func_get_route_polyline();
uint16_t uniffi_ferrostar_checksum_func_location_simulation_from_coordinates();
uint16_t uniffi_ferrostar_checksum_func_location_simulation_from_polyline();
uint16_t uniffi_ferrostar_checksum_func_location_simulation_from_route();
uint16_t
uniffi_ferrostar_checksum_method_navigationcontroller_advance_to_next_step();
uint16_t
uniffi_ferrostar_checksum_method_navigationcontroller_get_initial_state();
uint16_t
uniffi_ferrostar_checksum_method_navigationcontroller_update_user_location();
uint16_t uniffi_ferrostar_checksum_method_routeadapter_generate_request();
uint16_t uniffi_ferrostar_checksum_method_routeadapter_parse_response();
uint16_t
uniffi_ferrostar_checksum_method_routedeviationdetector_check_route_deviation();
uint16_t
uniffi_ferrostar_checksum_method_routerequestgenerator_generate_request();
uint16_t uniffi_ferrostar_checksum_method_routeresponseparser_parse_response();
uint16_t uniffi_ferrostar_checksum_constructor_navigationcontroller_new();
uint16_t uniffi_ferrostar_checksum_constructor_routeadapter_new();
uint16_t uniffi_ferrostar_checksum_constructor_routeadapter_new_valhalla_http();
uint32_t ffi_ferrostar_uniffi_contract_version();
}

// This calls into Rust.

namespace uniffi::ferrostar {
template <typename T> struct Bridging;

using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <typename T> struct Bridging<ReferenceHolder<T>> {
  static jsi::Value jsNew(jsi::Runtime &rt) {
    auto holder = jsi::Object(rt);
    return holder;
  }
  static T fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
                  const jsi::Value &value) {
    auto obj = value.asObject(rt);
    if (obj.hasProperty(rt, "pointee")) {
      auto pointee = obj.getProperty(rt, "pointee");
      return uniffi::ferrostar::Bridging<T>::fromJs(rt, callInvoker, pointee);
    }
    throw jsi::JSError(rt,
                       "Expected ReferenceHolder to have a pointee property. "
                       "This is likely a bug in uniffi-bindgen-react-native");
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<RustBuffer> {
  static RustBuffer rustbuffer_alloc(int32_t size) {
    RustCallStatus status = {UNIFFI_CALL_STATUS_OK};
    return ffi_ferrostar_rustbuffer_alloc(size, &status);
  }

  static RustBuffer fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker>,
                           const jsi::Value &value) {
    try {
      auto bytes = uniffi_jsi::Bridging<ForeignBytes>::fromJs(rt, value);
      // This buffer is constructed from foreign bytes. Rust scaffolding copies
      // the bytes, to make the RustBuffer.
      RustCallStatus status = {UNIFFI_CALL_STATUS_OK};
      auto buf = ffi_ferrostar_rustbuffer_from_bytes(bytes, &status);
      // Once it leaves this function, the buffer is immediately passed back
      // into Rust, where it's used to deserialize into the Rust versions of the
      // arguments. At that point, the copy is destroyed.
      return buf;
    } catch (const std::logic_error &e) {
      throw jsi::JSError(rt, e.what());
    }
  }

  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker>,
                         RustBuffer buf) {
    // We need to make a copy of the bytes from Rust's memory space into
    // Javascripts memory space. We need to do this because the two languages
    // manages memory very differently: a garbage collector needs to track all
    // the memory at runtime, Rust is doing it all closer to compile time.
    uint8_t *bytes = new uint8_t[buf.len];
    std::memcpy(bytes, buf.data, buf.len);

    // Construct an ArrayBuffer with copy of the bytes from the RustBuffer.
    auto payload = std::make_shared<uniffi_jsi::CMutableBuffer>(
        uniffi_jsi::CMutableBuffer((uint8_t *)bytes, buf.len));
    auto arrayBuffer = jsi::ArrayBuffer(rt, payload);

    // Once we have a Javascript version, we no longer need the Rust version, so
    // we can call into Rust to tell it it's okay to free that memory.
    RustCallStatus status = {UNIFFI_CALL_STATUS_OK};

    ffi_ferrostar_rustbuffer_free(buf, &status);

    // Finally, return the ArrayBuffer.
    return jsi::Value(rt, arrayBuffer);
  }
};

} // namespace uniffi::ferrostar

namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<RustCallStatus> {
  static jsi::Value jsSuccess(jsi::Runtime &rt) {
    auto statusObject = jsi::Object(rt);
    statusObject.setProperty(rt, "code", jsi::Value(rt, UNIFFI_CALL_STATUS_OK));
    return statusObject;
  }
  static RustCallStatus rustSuccess(jsi::Runtime &rt) {
    return {UNIFFI_CALL_STATUS_OK};
  }
  static void copyIntoJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         const RustCallStatus status,
                         const jsi::Value &jsStatus) {
    auto statusObject = jsStatus.asObject(rt);
    if (status.error_buf.data != nullptr) {
      auto rbuf = Bridging<RustBuffer>::toJs(rt, callInvoker, status.error_buf);
      statusObject.setProperty(rt, "errorBuf", rbuf);
    }
    if (status.code != UNIFFI_CALL_STATUS_OK) {
      auto code =
          uniffi_jsi::Bridging<uint8_t>::toJs(rt, callInvoker, status.code);
      statusObject.setProperty(rt, "code", code);
    }
  }

  static RustCallStatus fromJs(jsi::Runtime &rt,
                               std::shared_ptr<CallInvoker> invoker,
                               const jsi::Value &jsStatus) {
    RustCallStatus status;
    auto statusObject = jsStatus.asObject(rt);
    if (statusObject.hasProperty(rt, "errorBuf")) {
      auto rbuf = statusObject.getProperty(rt, "errorBuf");
      status.error_buf = Bridging<RustBuffer>::fromJs(rt, invoker, rbuf);
    }
    if (statusObject.hasProperty(rt, "code")) {
      auto code = statusObject.getProperty(rt, "code");
      status.code = uniffi_jsi::Bridging<uint8_t>::fromJs(rt, invoker, code);
    }
    return status;
  }

  static void copyFromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> invoker,
                         const jsi::Value &jsStatus, RustCallStatus *status) {
    auto statusObject = jsStatus.asObject(rt);
    if (statusObject.hasProperty(rt, "errorBuf")) {
      auto rbuf = statusObject.getProperty(rt, "errorBuf");
      status->error_buf = Bridging<RustBuffer>::fromJs(rt, invoker, rbuf);
    }
    if (statusObject.hasProperty(rt, "code")) {
      auto code = statusObject.getProperty(rt, "code");
      status->code = uniffi_jsi::Bridging<uint8_t>::fromJs(rt, invoker, code);
    }
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from Rust to JS
  // RustFutureContinuationCallback

// Callback function:
// uniffi::ferrostar::cb::rustfuturecontinuationcallback::UniffiRustFutureContinuationCallback
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::ferrostar::cb::rustfuturecontinuationcallback {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, int8_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue, uint64_t rs_data,
                 int8_t rs_pollResult) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_data = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_data);
  auto js_pollResult =
      uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, rs_pollResult);

  // Now we are ready to call the callback.
  // We should be using callInvoker at this point, but for now
  // we think that there are no threading issues to worry about.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    cb.call(rt, js_data, js_pollResult);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiRustFutureContinuationCallback: "
              << error.what() << std::endl;
  }
}

static void callback(uint64_t rs_data, int8_t rs_pollResult) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_data, rs_pollResult);
}

static UniffiRustFutureContinuationCallback
makeCallbackFunction( // uniffi::ferrostar::cb::rustfuturecontinuationcallback
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_data,
                                               int8_t rs_pollResult) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_data,
         rs_pollResult](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_data, rs_pollResult);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.

    callInvoker->invokeNonBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeFerrostar, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::ferrostar::cb::rustfuturecontinuationcallback
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureFree, passed from Rust to JS as part of async callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureFree> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureFree rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureFree"), 1,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureFree func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
  // Implementation of free callback function CallbackInterfaceFree

// Callback function:
// uniffi::ferrostar::st::foreignfuture::foreignfuture::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::ferrostar::st::foreignfuture::foreignfuture::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We should be using callInvoker at this point, but for now
  // we think that there are no threading issues to worry about.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::ferrostar::st::foreignfuture::foreignfuture::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeFerrostar, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace uniffi::ferrostar::st::foreignfuture::foreignfuture::free

// Callback function:
// uniffi::ferrostar::st::vtablecallbackinterfaceroutedeviationdetector::vtablecallbackinterfaceroutedeviationdetector::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::ferrostar::st::vtablecallbackinterfaceroutedeviationdetector::
    vtablecallbackinterfaceroutedeviationdetector::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We should be using callInvoker at this point, but for now
  // we think that there are no threading issues to worry about.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::ferrostar::st::vtablecallbackinterfaceroutedeviationdetector::vtablecallbackinterfaceroutedeviationdetector::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeFerrostar, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::ferrostar::st::vtablecallbackinterfaceroutedeviationdetector::vtablecallbackinterfaceroutedeviationdetector::free

// Callback function:
// uniffi::ferrostar::st::vtablecallbackinterfacerouterequestgenerator::vtablecallbackinterfacerouterequestgenerator::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::ferrostar::st::vtablecallbackinterfacerouterequestgenerator::
    vtablecallbackinterfacerouterequestgenerator::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We should be using callInvoker at this point, but for now
  // we think that there are no threading issues to worry about.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::ferrostar::st::vtablecallbackinterfacerouterequestgenerator::vtablecallbackinterfacerouterequestgenerator::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeFerrostar, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::ferrostar::st::vtablecallbackinterfacerouterequestgenerator::vtablecallbackinterfacerouterequestgenerator::free

// Callback function:
// uniffi::ferrostar::st::vtablecallbackinterfacerouteresponseparser::vtablecallbackinterfacerouteresponseparser::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::ferrostar::st::vtablecallbackinterfacerouteresponseparser::
    vtablecallbackinterfacerouteresponseparser::free {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t)> rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_handle) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_handle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

  // Now we are ready to call the callback.
  // We should be using callInvoker at this point, but for now
  // we think that there are no threading issues to worry about.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    cb.call(rt, js_handle);

  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback UniffiCallbackInterfaceFree: "
              << error.what() << std::endl;
  }
}

static void callback(uint64_t rs_handle) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_handle);
}

static UniffiCallbackInterfaceFree
makeCallbackFunction( // uniffi::ferrostar::st::vtablecallbackinterfacerouteresponseparser::vtablecallbackinterfacerouteresponseparser::free
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_handle](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_handle);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeFerrostar, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::ferrostar::st::vtablecallbackinterfacerouteresponseparser::vtablecallbackinterfacerouteresponseparser::free
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFuture> {
  static UniffiForeignFuture fromJs(jsi::Runtime &rt,
                                    std::shared_ptr<CallInvoker> callInvoker,
                                    const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFuture");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFuture rsObject;

    // Create the vtable from the js callbacks.
    rsObject.handle = uniffi_jsi::Bridging<uint64_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "handle"));
    rsObject.free = uniffi::ferrostar::st::foreignfuture::foreignfuture::free::
        makeCallbackFunction(rt, callInvoker, jsObject.getProperty(rt, "free"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU8> {
  static UniffiForeignFutureStructU8
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU8");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU8 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint8_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU8, passed from Rust to JS as part of async callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU8> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU8 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU8"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU8 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<UniffiForeignFutureStructU8>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI8> {
  static UniffiForeignFutureStructI8
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI8");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI8 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int8_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI8, passed from Rust to JS as part of async callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI8> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI8 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI8"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI8 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<UniffiForeignFutureStructI8>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU16> {
  static UniffiForeignFutureStructU16
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU16");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU16 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint16_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU16, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU16> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU16 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU16"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU16 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<UniffiForeignFutureStructU16>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI16> {
  static UniffiForeignFutureStructI16
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI16");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI16 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int16_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI16, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI16> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI16 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI16"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI16 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<UniffiForeignFutureStructI16>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU32> {
  static UniffiForeignFutureStructU32
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint32_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU32, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU32> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU32"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<UniffiForeignFutureStructU32>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI32> {
  static UniffiForeignFutureStructI32
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int32_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI32, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI32> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI32"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<UniffiForeignFutureStructI32>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructU64> {
  static UniffiForeignFutureStructU64
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructU64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructU64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint64_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteU64, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU64> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteU64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU64"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteU64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<UniffiForeignFutureStructU64>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructI64> {
  static UniffiForeignFutureStructI64
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructI64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructI64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int64_t>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteI64, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI64> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteI64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI64"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteI64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<UniffiForeignFutureStructI64>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructF32> {
  static UniffiForeignFutureStructF32
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructF32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructF32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<float>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteF32, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteF32> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteF32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteF32"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteF32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<UniffiForeignFutureStructF32>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructF64> {
  static UniffiForeignFutureStructF64
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for UniffiForeignFutureStructF64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructF64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<double>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteF64, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteF64> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteF64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteF64"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteF64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<UniffiForeignFutureStructF64>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructPointer> {
  static UniffiForeignFutureStructPointer
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for UniffiForeignFutureStructPointer");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructPointer rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<void *>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompletePointer, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompletePointer> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompletePointer rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompletePointer"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompletePointer func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<UniffiForeignFutureStructPointer>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructRustBuffer> {
  static UniffiForeignFutureStructRustBuffer
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for UniffiForeignFutureStructRustBuffer");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructRustBuffer rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi::ferrostar::Bridging<RustBuffer>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "returnValue"));
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteRustBuffer, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteRustBuffer> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteRustBuffer rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteRustBuffer"),
        2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteRustBuffer func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<
             UniffiForeignFutureStructRustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureStructVoid> {
  static UniffiForeignFutureStructVoid
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(
          rt, "Expected an object for UniffiForeignFutureStructVoid");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureStructVoid rsObject;

    // Create the vtable from the js callbacks.
    rsObject.call_status = uniffi::ferrostar::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker, jsObject.getProperty(rt, "callStatus"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
  // Implementation of callback function calling from JS to Rust
  // ForeignFutureCompleteVoid, passed from Rust to JS as part of async
  // callbacks.
namespace uniffi::ferrostar {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteVoid> {
  static jsi::Value toJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         UniffiForeignFutureCompleteVoid rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt, jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteVoid"), 2,
        [rsCallback, callInvoker](jsi::Runtime &rt, const jsi::Value &thisValue,
                                  const jsi::Value *arguments,
                                  size_t count) -> jsi::Value {
          return intoRust(rt, callInvoker, thisValue, arguments, count,
                          rsCallback);
        });
  }

  static jsi::Value intoRust(jsi::Runtime &rt,
                             std::shared_ptr<CallInvoker> callInvoker,
                             const jsi::Value &thisValue,
                             const jsi::Value *args, size_t count,
                             UniffiForeignFutureCompleteVoid func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
    func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]),
         uniffi::ferrostar::Bridging<UniffiForeignFutureStructVoid>::fromJs(
             rt, callInvoker, args[1]));

    return jsi::Value::undefined();
  }
};
} // namespace uniffi::ferrostar
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceRouteDeviationDetectorMethod0

// Callback function:
// uniffi::ferrostar::cb::callbackinterfaceroutedeviationdetectormethod0::UniffiCallbackInterfaceRouteDeviationDetectorMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::ferrostar::cb::
    callbackinterfaceroutedeviationdetectormethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, RustBuffer, RustBuffer,
                          RustBuffer *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_location,
                 RustBuffer rs_route, RustBuffer rs_currentRouteStep,
                 RustBuffer *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_location = uniffi::ferrostar::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_location);
  auto js_route =
      uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_route);
  auto js_currentRouteStep = uniffi::ferrostar::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_currentRouteStep);
  // … but we need to take extra care for the return value.
  // In the typescript we use a dummy object we called a ReferenceHolder.
  auto js_uniffiOutReturn =
      uniffi_jsi::Bridging<ReferenceHolder<RustBuffer>>::jsNew(rt);

  // The RustCallStatus is another very simple JS object which will
  // report errors back to Rust.
  auto uniffiCallStatus =
      uniffi::ferrostar::Bridging<RustCallStatus>::jsSuccess(rt);

  // Now we are ready to call the callback.
  // We should be using callInvoker at this point, but for now
  // we think that there are no threading issues to worry about.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    cb.call(rt, js_uniffiHandle, js_location, js_route, js_currentRouteStep,
            js_uniffiOutReturn, uniffiCallStatus);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::ferrostar::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiCallStatus, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn =
        uniffi::ferrostar::Bridging<ReferenceHolder<RustBuffer>>::fromJs(
            rt, callInvoker, js_uniffiOutReturn);
  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceRouteDeviationDetectorMethod0: "
              << error.what() << std::endl;
    uniffi::ferrostar::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiCallStatus, uniffi_call_status);
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_location,
                     RustBuffer rs_route, RustBuffer rs_currentRouteStep,
                     RustBuffer *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_location, rs_route, rs_currentRouteStep,
           rs_uniffiOutReturn, uniffi_call_status);
}

static UniffiCallbackInterfaceRouteDeviationDetectorMethod0
makeCallbackFunction( // uniffi::ferrostar::cb::callbackinterfaceroutedeviationdetectormethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_location,
                 RustBuffer rs_route, RustBuffer rs_currentRouteStep,
                 RustBuffer *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_location, rs_route,
         rs_currentRouteStep, rs_uniffiOutReturn,
         uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_location,
               rs_route, rs_currentRouteStep, rs_uniffiOutReturn,
               uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeFerrostar, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::ferrostar::cb::callbackinterfaceroutedeviationdetectormethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceRouteRequestGeneratorMethod0

// Callback function:
// uniffi::ferrostar::cb::callbackinterfacerouterequestgeneratormethod0::UniffiCallbackInterfaceRouteRequestGeneratorMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::ferrostar::cb::callbackinterfacerouterequestgeneratormethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, RustBuffer, RustBuffer *,
                          RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_userLocation,
                 RustBuffer rs_waypoints, RustBuffer *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_userLocation = uniffi::ferrostar::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_userLocation);
  auto js_waypoints = uniffi::ferrostar::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_waypoints);
  // … but we need to take extra care for the return value.
  // In the typescript we use a dummy object we called a ReferenceHolder.
  auto js_uniffiOutReturn =
      uniffi_jsi::Bridging<ReferenceHolder<RustBuffer>>::jsNew(rt);

  // The RustCallStatus is another very simple JS object which will
  // report errors back to Rust.
  auto uniffiCallStatus =
      uniffi::ferrostar::Bridging<RustCallStatus>::jsSuccess(rt);

  // Now we are ready to call the callback.
  // We should be using callInvoker at this point, but for now
  // we think that there are no threading issues to worry about.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    cb.call(rt, js_uniffiHandle, js_userLocation, js_waypoints,
            js_uniffiOutReturn, uniffiCallStatus);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::ferrostar::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiCallStatus, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn =
        uniffi::ferrostar::Bridging<ReferenceHolder<RustBuffer>>::fromJs(
            rt, callInvoker, js_uniffiOutReturn);
  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceRouteRequestGeneratorMethod0: "
              << error.what() << std::endl;
    uniffi::ferrostar::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiCallStatus, uniffi_call_status);
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_userLocation,
                     RustBuffer rs_waypoints, RustBuffer *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_userLocation, rs_waypoints, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceRouteRequestGeneratorMethod0
makeCallbackFunction( // uniffi::ferrostar::cb::callbackinterfacerouterequestgeneratormethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker, callbackValue](
                 uint64_t rs_uniffiHandle, RustBuffer rs_userLocation,
                 RustBuffer rs_waypoints, RustBuffer *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_userLocation,
         rs_waypoints, rs_uniffiOutReturn,
         uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_userLocation,
               rs_waypoints, rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeFerrostar, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::ferrostar::cb::callbackinterfacerouterequestgeneratormethod0
  // Implementation of callback function calling from Rust to JS
  // CallbackInterfaceRouteResponseParserMethod0

// Callback function:
// uniffi::ferrostar::cb::callbackinterfacerouteresponseparsermethod0::UniffiCallbackInterfaceRouteResponseParserMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback`
// function calls the lambda, which itself calls the `body` which then calls
// into JS.
//
// We then give the `callback` function pointer to Rust which will call the
// lambda sometime in the future.
namespace uniffi::ferrostar::cb::callbackinterfacerouteresponseparsermethod0 {
using namespace facebook;

// We need to store a lambda in a global so we can call it from
// a function pointer. The function pointer is passed to Rust.
static std::function<void(uint64_t, RustBuffer, RustBuffer *, RustCallStatus *)>
    rsLambda = nullptr;

// This is the main body of the callback. It's called from the lambda,
// which itself is called from the callback function which is passed to Rust.
static void body(jsi::Runtime &rt,
                 std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                 std::shared_ptr<jsi::Value> callbackValue,
                 uint64_t rs_uniffiHandle, RustBuffer rs_response,
                 RustBuffer *rs_uniffiOutReturn,
                 RustCallStatus *uniffi_call_status) {

  // Convert the arguments from Rust, into jsi::Values.
  // We'll use the Bridging class to do this…
  auto js_uniffiHandle =
      uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
  auto js_response = uniffi::ferrostar::Bridging<RustBuffer>::toJs(
      rt, callInvoker, rs_response);
  // … but we need to take extra care for the return value.
  // In the typescript we use a dummy object we called a ReferenceHolder.
  auto js_uniffiOutReturn =
      uniffi_jsi::Bridging<ReferenceHolder<RustBuffer>>::jsNew(rt);

  // The RustCallStatus is another very simple JS object which will
  // report errors back to Rust.
  auto uniffiCallStatus =
      uniffi::ferrostar::Bridging<RustCallStatus>::jsSuccess(rt);

  // Now we are ready to call the callback.
  // We should be using callInvoker at this point, but for now
  // we think that there are no threading issues to worry about.
  try {
    // Getting the callback function
    auto cb = callbackValue->asObject(rt).asFunction(rt);
    cb.call(rt, js_uniffiHandle, js_response, js_uniffiOutReturn,
            uniffiCallStatus);

    // Now copy the result back from JS into the RustCallStatus object.
    uniffi::ferrostar::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiCallStatus, uniffi_call_status);

    if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
      // The JS callback finished abnormally, so we cannot retrieve the return
      // value.
      return;
    }

    // Finally, we need to copy the return value back into the Rust pointer.
    *rs_uniffiOutReturn =
        uniffi::ferrostar::Bridging<ReferenceHolder<RustBuffer>>::fromJs(
            rt, callInvoker, js_uniffiOutReturn);
  } catch (const jsi::JSError &error) {
    std::cout << "Error in callback "
                 "UniffiCallbackInterfaceRouteResponseParserMethod0: "
              << error.what() << std::endl;
    uniffi::ferrostar::Bridging<RustCallStatus>::copyFromJs(
        rt, callInvoker, uniffiCallStatus, uniffi_call_status);
  }
}

static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_response,
                     RustBuffer *rs_uniffiOutReturn,
                     RustCallStatus *uniffi_call_status) {
  // If the runtime has shutdown, then there is no point in trying to
  // call into Javascript. BUT how do we tell if the runtime has shutdown?
  //
  // Answer: the module destructor calls into callback `cleanup` method,
  // which nulls out the rsLamda.
  //
  // If rsLamda is null, then there is no runtime to call into.
  if (rsLambda == nullptr) {
    // This only occurs when destructors are calling into Rust free/drop,
    // which causes the JS callback to be dropped.
    return;
  }

  // The runtime, the actual callback jsi::funtion, and the callInvoker
  // are all in the lambda.
  rsLambda(rs_uniffiHandle, rs_response, rs_uniffiOutReturn,
           uniffi_call_status);
}

static UniffiCallbackInterfaceRouteResponseParserMethod0
makeCallbackFunction( // uniffi::ferrostar::cb::callbackinterfacerouteresponseparsermethod0
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
    const jsi::Value &value) {
  auto callbackFunction = value.asObject(rt).asFunction(rt);
  auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
  rsLambda = [&rt, callInvoker,
              callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_response,
                             RustBuffer *rs_uniffiOutReturn,
                             RustCallStatus *uniffi_call_status) {
    // We immediately make a lambda which will do the work of transforming the
    // arguments into JSI values and calling the callback.
    uniffi_runtime::UniffiCallFunc jsLambda =
        [callInvoker, callbackValue, rs_uniffiHandle, rs_response,
         rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
          body(rt, callInvoker, callbackValue, rs_uniffiHandle, rs_response,
               rs_uniffiOutReturn, uniffi_call_status);
        };
    // We'll then call that lambda from the callInvoker which will
    // look after calling it on the correct thread.
    callInvoker->invokeBlocking(rt, jsLambda);
  };
  return callback;
}

// This method is called from the destructor of NativeFerrostar, which only
// happens when the jsi::Runtime is being destroyed.
static void cleanup() {
  // The lambda holds a reference to the the Runtime, so when this is nulled
  // out, then the pointer will no longer be left dangling.
  rsLambda = nullptr;
}
} // namespace
  // uniffi::ferrostar::cb::callbackinterfacerouteresponseparsermethod0
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceRouteDeviationDetector> {
  static UniffiVTableCallbackInterfaceRouteDeviationDetector
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for "
                         "UniffiVTableCallbackInterfaceRouteDeviationDetector");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceRouteDeviationDetector rsObject;

    // Create the vtable from the js callbacks.
    rsObject.check_route_deviation = uniffi::ferrostar::cb::
        callbackinterfaceroutedeviationdetectormethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "checkRouteDeviation"));
    rsObject.uniffi_free =
        uniffi::ferrostar::st::vtablecallbackinterfaceroutedeviationdetector::
            vtablecallbackinterfaceroutedeviationdetector::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <>
struct Bridging<UniffiVTableCallbackInterfaceRouteRequestGenerator> {
  static UniffiVTableCallbackInterfaceRouteRequestGenerator
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for "
                         "UniffiVTableCallbackInterfaceRouteRequestGenerator");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceRouteRequestGenerator rsObject;

    // Create the vtable from the js callbacks.
    rsObject.generate_request = uniffi::ferrostar::cb::
        callbackinterfacerouterequestgeneratormethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "generateRequest"));
    rsObject.uniffi_free =
        uniffi::ferrostar::st::vtablecallbackinterfacerouterequestgenerator::
            vtablecallbackinterfacerouterequestgenerator::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar
namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceRouteResponseParser> {
  static UniffiVTableCallbackInterfaceRouteResponseParser
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &jsValue) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt,
                         "Expected an object for "
                         "UniffiVTableCallbackInterfaceRouteResponseParser");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceRouteResponseParser rsObject;

    // Create the vtable from the js callbacks.
    rsObject.parse_response = uniffi::ferrostar::cb::
        callbackinterfacerouteresponseparsermethod0::makeCallbackFunction(
            rt, callInvoker, jsObject.getProperty(rt, "parseResponse"));
    rsObject.uniffi_free =
        uniffi::ferrostar::st::vtablecallbackinterfacerouteresponseparser::
            vtablecallbackinterfacerouteresponseparser::free::
                makeCallbackFunction(rt, callInvoker,
                                     jsObject.getProperty(rt, "uniffiFree"));

    return rsObject;
  }
};

} // namespace uniffi::ferrostar

namespace uniffi::ferrostar {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiRustFutureContinuationCallback> {
  static UniffiRustFutureContinuationCallback
  fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
         const jsi::Value &value) {
    try {
      static auto callback =
          uniffi::ferrostar::cb::rustfuturecontinuationcallback::
              makeCallbackFunction(rt, callInvoker, value);
      return callback;
    } catch (const std::logic_error &e) {
      throw jsi::JSError(rt, e.what());
    }
  }
};

} // namespace uniffi::ferrostar

NativeFerrostar::NativeFerrostar(
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> invoker)
    : callInvoker(invoker), props() {
  // Map from Javascript names to the cpp names
  props["uniffi_internal_fn_func_ffi__string_to_byte_length"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_internal_fn_func_ffi__string_to_byte_length"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__string_to_byte_length(
                rt, thisVal, args, count);
          });
  props["uniffi_internal_fn_func_ffi__string_to_arraybuffer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_internal_fn_func_ffi__string_to_arraybuffer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__string_to_arraybuffer(
                rt, thisVal, args, count);
          });
  props["uniffi_internal_fn_func_ffi__arraybuffer_to_string"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_internal_fn_func_ffi__arraybuffer_to_string"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__arraybuffer_to_string(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_clone_navigationcontroller"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_clone_navigationcontroller"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_clone_navigationcontroller(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_free_navigationcontroller"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_free_navigationcontroller"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_free_navigationcontroller(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_constructor_navigationcontroller_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_constructor_navigationcontroller_new"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_constructor_navigationcontroller_new(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_method_navigationcontroller_advance_to_next_"
        "step"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "uniffi_ferrostar_fn_method_"
                                "navigationcontroller_advance_to_next_step"),
      2,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_ferrostar_fn_method_navigationcontroller_advance_to_next_step(
                rt, thisVal, args, count);
      });
  props["uniffi_ferrostar_fn_method_navigationcontroller_get_initial_state"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "uniffi_ferrostar_fn_method_"
                                    "navigationcontroller_get_initial_state"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_method_navigationcontroller_get_initial_state(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_method_navigationcontroller_update_user_"
        "location"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "uniffi_ferrostar_fn_method_"
                                "navigationcontroller_update_user_location"),
      3,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_ferrostar_fn_method_navigationcontroller_update_user_location(
                rt, thisVal, args, count);
      });
  props["uniffi_ferrostar_fn_clone_routeadapter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "uniffi_ferrostar_fn_clone_routeadapter"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_clone_routeadapter(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_free_routeadapter"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "uniffi_ferrostar_fn_free_routeadapter"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_free_routeadapter(rt, thisVal,
                                                                   args, count);
          });
  props["uniffi_ferrostar_fn_constructor_routeadapter_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_constructor_routeadapter_new"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_constructor_routeadapter_new(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_constructor_routeadapter_new_valhalla_http"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "uniffi_ferrostar_fn_constructor_routeadapter_new_valhalla_http"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_constructor_routeadapter_new_valhalla_http(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_method_routeadapter_generate_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_method_routeadapter_generate_request"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_method_routeadapter_generate_request(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_method_routeadapter_parse_response"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_method_routeadapter_parse_response"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_method_routeadapter_parse_response(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_clone_routedeviationdetector"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_clone_routedeviationdetector"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_clone_routedeviationdetector(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_free_routedeviationdetector"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_free_routedeviationdetector"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_free_routedeviationdetector(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_method_routedeviationdetector_check_route_"
        "deviation"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "uniffi_ferrostar_fn_method_"
                                "routedeviationdetector_check_route_deviation"),
      4,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_ferrostar_fn_method_routedeviationdetector_check_route_deviation(
                rt, thisVal, args, count);
      });
  props["uniffi_ferrostar_fn_clone_routerequestgenerator"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_clone_routerequestgenerator"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_clone_routerequestgenerator(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_free_routerequestgenerator"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_free_routerequestgenerator"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_free_routerequestgenerator(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_method_routerequestgenerator_generate_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "uniffi_ferrostar_fn_method_"
                                    "routerequestgenerator_generate_request"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_method_routerequestgenerator_generate_request(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_clone_routeresponseparser"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_clone_routeresponseparser"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_clone_routeresponseparser(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_free_routeresponseparser"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_free_routeresponseparser"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_free_routeresponseparser(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_method_routeresponseparser_parse_response"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "uniffi_ferrostar_fn_method_routeresponseparser_parse_response"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_method_routeresponseparser_parse_response(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_func_advance_location_simulation"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_func_advance_location_simulation"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_func_advance_location_simulation(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_func_create_ferrostar_logger"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_func_create_ferrostar_logger"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_func_create_ferrostar_logger(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_func_create_osrm_response_parser"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_func_create_osrm_response_parser"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_func_create_osrm_response_parser(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_func_create_route_from_osrm"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_func_create_route_from_osrm"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_func_create_route_from_osrm(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_func_create_valhalla_request_generator"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_func_create_valhalla_request_generator"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_func_create_valhalla_request_generator(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_func_get_route_polyline"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_func_get_route_polyline"),
          2,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_fn_func_get_route_polyline(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_func_location_simulation_from_coordinates"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "uniffi_ferrostar_fn_func_location_simulation_from_coordinates"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_func_location_simulation_from_coordinates(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_func_location_simulation_from_polyline"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_func_location_simulation_from_polyline"),
          4,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_func_location_simulation_from_polyline(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_func_location_simulation_from_route"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_fn_func_location_simulation_from_route"),
          3,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_func_location_simulation_from_route(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_func_advance_location_simulation"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_checksum_func_advance_location_simulation"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_func_advance_location_simulation(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_func_create_ferrostar_logger"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_checksum_func_create_ferrostar_logger"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_func_create_ferrostar_logger(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_func_create_osrm_response_parser"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_checksum_func_create_osrm_response_parser"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_func_create_osrm_response_parser(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_func_create_route_from_osrm"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_checksum_func_create_route_from_osrm"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_func_create_route_from_osrm(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_func_create_valhalla_request_generator"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "uniffi_ferrostar_checksum_func_create_"
                                        "valhalla_request_generator"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_func_create_valhalla_request_generator(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_func_get_route_polyline"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_checksum_func_get_route_polyline"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_ferrostar_checksum_func_get_route_polyline(
                rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_func_location_simulation_from_coordinates"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "uniffi_ferrostar_checksum_func_"
                                        "location_simulation_from_coordinates"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_func_location_simulation_from_coordinates(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_func_location_simulation_from_polyline"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "uniffi_ferrostar_checksum_func_"
                                        "location_simulation_from_polyline"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_func_location_simulation_from_polyline(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_func_location_simulation_from_route"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "uniffi_ferrostar_checksum_func_location_simulation_from_route"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_func_location_simulation_from_route(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_method_navigationcontroller_advance_to_next_"
        "step"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "uniffi_ferrostar_checksum_method_"
                                "navigationcontroller_advance_to_next_step"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_ferrostar_checksum_method_navigationcontroller_advance_to_next_step(
                rt, thisVal, args, count);
      });
  props["uniffi_ferrostar_checksum_method_navigationcontroller_get_initial_"
        "state"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "uniffi_ferrostar_checksum_method_"
                                    "navigationcontroller_get_initial_state"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_ferrostar_checksum_method_navigationcontroller_get_initial_state(
                rt, thisVal, args, count);
      });
  props["uniffi_ferrostar_checksum_method_navigationcontroller_update_user_"
        "location"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "uniffi_ferrostar_checksum_method_"
                                "navigationcontroller_update_user_location"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_ferrostar_checksum_method_navigationcontroller_update_user_location(
                rt, thisVal, args, count);
      });
  props["uniffi_ferrostar_checksum_method_routeadapter_generate_request"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "uniffi_ferrostar_checksum_method_routeadapter_generate_request"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_method_routeadapter_generate_request(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_method_routeadapter_parse_response"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "uniffi_ferrostar_checksum_method_routeadapter_parse_response"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_method_routeadapter_parse_response(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_method_routedeviationdetector_check_route_"
        "deviation"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt,
                                "uniffi_ferrostar_checksum_method_"
                                "routedeviationdetector_check_route_deviation"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_ferrostar_checksum_method_routedeviationdetector_check_route_deviation(
                rt, thisVal, args, count);
      });
  props["uniffi_ferrostar_checksum_method_routerequestgenerator_generate_"
        "request"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "uniffi_ferrostar_checksum_method_"
                                    "routerequestgenerator_generate_request"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_ferrostar_checksum_method_routerequestgenerator_generate_request(
                rt, thisVal, args, count);
      });
  props["uniffi_ferrostar_checksum_method_routeresponseparser_parse_response"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "uniffi_ferrostar_checksum_method_"
                                        "routeresponseparser_parse_response"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_method_routeresponseparser_parse_response(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_constructor_navigationcontroller_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "uniffi_ferrostar_checksum_constructor_navigationcontroller_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_constructor_navigationcontroller_new(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_constructor_routeadapter_new"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_ferrostar_checksum_constructor_routeadapter_new"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_checksum_constructor_routeadapter_new(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_checksum_constructor_routeadapter_new_valhalla_"
        "http"] = jsi::Function::createFromHostFunction(
      rt,
      jsi::PropNameID::forAscii(rt, "uniffi_ferrostar_checksum_constructor_"
                                    "routeadapter_new_valhalla_http"),
      0,
      [this](jsi::Runtime &rt, const jsi::Value &thisVal,
             const jsi::Value *args, size_t count) -> jsi::Value {
        return this
            ->cpp_uniffi_ferrostar_checksum_constructor_routeadapter_new_valhalla_http(
                rt, thisVal, args, count);
      });
  props["ffi_ferrostar_uniffi_contract_version"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "ffi_ferrostar_uniffi_contract_version"),
          0,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_ferrostar_uniffi_contract_version(rt, thisVal,
                                                                   args, count);
          });
  props["uniffi_ferrostar_fn_init_callback_vtable_routedeviationdetector"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt, "uniffi_ferrostar_fn_init_callback_"
                                        "vtable_routedeviationdetector"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_init_callback_vtable_routedeviationdetector(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_init_callback_vtable_routerequestgenerator"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "uniffi_ferrostar_fn_init_callback_vtable_routerequestgenerator"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_init_callback_vtable_routerequestgenerator(
                    rt, thisVal, args, count);
          });
  props["uniffi_ferrostar_fn_init_callback_vtable_routeresponseparser"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt,
              "uniffi_ferrostar_fn_init_callback_vtable_routeresponseparser"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_ferrostar_fn_init_callback_vtable_routeresponseparser(
                    rt, thisVal, args, count);
          });
  props["uniffi_internal_fn_method_navigationcontroller_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "uniffi_internal_fn_method_"
                                    "navigationcontroller_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_navigationcontroller_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["uniffi_internal_fn_method_routeadapter_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_internal_fn_method_routeadapter_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_routeadapter_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["uniffi_internal_fn_method_routedeviationdetector_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(
              rt, "uniffi_internal_fn_method_routedeviationdetector_ffi__bless_"
                  "pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_routedeviationdetector_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["uniffi_internal_fn_method_routerequestgenerator_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "uniffi_internal_fn_method_"
                                    "routerequestgenerator_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_routerequestgenerator_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
  props["uniffi_internal_fn_method_routeresponseparser_ffi__bless_pointer"] =
      jsi::Function::createFromHostFunction(
          rt,
          jsi::PropNameID::forAscii(rt,
                                    "uniffi_internal_fn_method_"
                                    "routeresponseparser_ffi__bless_pointer"),
          1,
          [this](jsi::Runtime &rt, const jsi::Value &thisVal,
                 const jsi::Value *args, size_t count) -> jsi::Value {
            return this
                ->cpp_uniffi_internal_fn_method_routeresponseparser_ffi__bless_pointer(
                    rt, thisVal, args, count);
          });
}

void NativeFerrostar::registerModule(
    jsi::Runtime &rt, std::shared_ptr<react::CallInvoker> callInvoker) {
  auto invoker =
      std::make_shared<uniffi_runtime::UniffiCallInvoker>(callInvoker);
  auto tm = std::make_shared<NativeFerrostar>(rt, invoker);
  auto obj = rt.global().createFromHostObject(rt, tm);
  rt.global().setProperty(rt, "NativeFerrostar", obj);
}

void NativeFerrostar::unregisterModule(jsi::Runtime &rt) {
  // NOOP
}

jsi::Value NativeFerrostar::get(jsi::Runtime &rt, const jsi::PropNameID &name) {
  try {
    return jsi::Value(rt, props.at(name.utf8(rt)));
  } catch (std::out_of_range &e) {
    return jsi::Value::undefined();
  }
}

std::vector<jsi::PropNameID>
NativeFerrostar::getPropertyNames(jsi::Runtime &rt) {
  std::vector<jsi::PropNameID> rval;
  for (auto &[key, value] : props) {
    rval.push_back(jsi::PropNameID::forUtf8(rt, key));
  }
  return rval;
}

void NativeFerrostar::set(jsi::Runtime &rt, const jsi::PropNameID &name,
                          const jsi::Value &value) {
  props.insert_or_assign(name.utf8(rt), &value);
}

NativeFerrostar::~NativeFerrostar() {
  // Cleanup for callback function RustFutureContinuationCallback
  uniffi::ferrostar::cb::rustfuturecontinuationcallback::cleanup();
  // Cleanup for "free" callback function CallbackInterfaceFree
  uniffi::ferrostar::st::foreignfuture::foreignfuture::free::cleanup();
  uniffi::ferrostar::st::vtablecallbackinterfaceroutedeviationdetector::
      vtablecallbackinterfaceroutedeviationdetector::free::cleanup();
  uniffi::ferrostar::st::vtablecallbackinterfacerouterequestgenerator::
      vtablecallbackinterfacerouterequestgenerator::free::cleanup();
  uniffi::ferrostar::st::vtablecallbackinterfacerouteresponseparser::
      vtablecallbackinterfacerouteresponseparser::free::cleanup();
  // Cleanup for callback function
  // CallbackInterfaceRouteDeviationDetectorMethod0
  uniffi::ferrostar::cb::callbackinterfaceroutedeviationdetectormethod0::
      cleanup();
  // Cleanup for callback function CallbackInterfaceRouteRequestGeneratorMethod0
  uniffi::ferrostar::cb::callbackinterfacerouterequestgeneratormethod0::
      cleanup();
  // Cleanup for callback function CallbackInterfaceRouteResponseParserMethod0
  uniffi::ferrostar::cb::callbackinterfacerouteresponseparsermethod0::cleanup();
}

// Utility functions for serialization/deserialization of strings.
jsi::Value
NativeFerrostar::cpp_uniffi_internal_fn_func_ffi__string_to_byte_length(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  return uniffi_jsi::Bridging<std::string>::string_to_bytelength(rt, args[0]);
}

jsi::Value
NativeFerrostar::cpp_uniffi_internal_fn_func_ffi__string_to_arraybuffer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  return uniffi_jsi::Bridging<std::string>::string_to_arraybuffer(rt, args[0]);
}

jsi::Value
NativeFerrostar::cpp_uniffi_internal_fn_func_ffi__arraybuffer_to_string(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  return uniffi_jsi::Bridging<std::string>::arraybuffer_to_string(rt, args[0]);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_internal_fn_method_navigationcontroller_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_ferrostar_fn_free_navigationcontroller(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value
NativeFerrostar::cpp_uniffi_internal_fn_method_routeadapter_ffi__bless_pointer(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_ferrostar_fn_free_routeadapter(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_internal_fn_method_routedeviationdetector_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_ferrostar_fn_free_routedeviationdetector(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_internal_fn_method_routerequestgenerator_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_ferrostar_fn_free_routerequestgenerator(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_internal_fn_method_routeresponseparser_ffi__bless_pointer(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto pointer =
      uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
  auto static destructor = [](uint64_t p) {
    auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
    RustCallStatus status = {0};
    uniffi_ferrostar_fn_free_routeresponseparser(pointer, &status);
  };
  auto ptrObj =
      std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
  auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
  return jsi::Value(rt, obj);
}

// Methods calling directly into the uniffi generated C API of the Rust crate.
jsi::Value NativeFerrostar::cpp_uniffi_ferrostar_fn_clone_navigationcontroller(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_clone_navigationcontroller(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::cpp_uniffi_ferrostar_fn_free_navigationcontroller(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_ferrostar_fn_free_navigationcontroller(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_fn_constructor_navigationcontroller_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_constructor_navigationcontroller_new(
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_fn_method_navigationcontroller_advance_to_next_step(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_ferrostar_fn_method_navigationcontroller_advance_to_next_step(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_fn_method_navigationcontroller_get_initial_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_ferrostar_fn_method_navigationcontroller_get_initial_state(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_fn_method_navigationcontroller_update_user_location(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_ferrostar_fn_method_navigationcontroller_update_user_location(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[2]),
          &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::cpp_uniffi_ferrostar_fn_clone_routeadapter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_clone_routeadapter(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::cpp_uniffi_ferrostar_fn_free_routeadapter(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_ferrostar_fn_free_routeadapter(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_fn_constructor_routeadapter_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_constructor_routeadapter_new(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[1]), &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_fn_constructor_routeadapter_new_valhalla_http(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_constructor_routeadapter_new_valhalla_http(
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_fn_method_routeadapter_generate_request(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_method_routeadapter_generate_request(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_fn_method_routeadapter_parse_response(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_method_routeadapter_parse_response(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_fn_clone_routedeviationdetector(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_clone_routedeviationdetector(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::cpp_uniffi_ferrostar_fn_free_routedeviationdetector(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_ferrostar_fn_free_routedeviationdetector(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_fn_method_routedeviationdetector_check_route_deviation(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_ferrostar_fn_method_routedeviationdetector_check_route_deviation(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[2]),
          uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[3]),
          &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::cpp_uniffi_ferrostar_fn_clone_routerequestgenerator(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_clone_routerequestgenerator(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::cpp_uniffi_ferrostar_fn_free_routerequestgenerator(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_ferrostar_fn_free_routerequestgenerator(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_fn_method_routerequestgenerator_generate_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value =
      uniffi_ferrostar_fn_method_routerequestgenerator_generate_request(
          uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
          uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[1]),
          uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker,
                                                          args[2]),
          &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::cpp_uniffi_ferrostar_fn_clone_routeresponseparser(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_clone_routeresponseparser(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::cpp_uniffi_ferrostar_fn_free_routeresponseparser(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_ferrostar_fn_free_routeresponseparser(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]), &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_fn_method_routeresponseparser_parse_response(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_method_routeresponseparser_parse_response(
      uniffi_jsi::Bridging<void *>::fromJs(rt, callInvoker, args[0]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_fn_func_advance_location_simulation(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_func_advance_location_simulation(
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_fn_func_create_ferrostar_logger(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  uniffi_ferrostar_fn_func_create_ferrostar_logger(&status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return jsi::Value::undefined();
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_fn_func_create_osrm_response_parser(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_func_create_osrm_response_parser(
      uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[0]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::cpp_uniffi_ferrostar_fn_func_create_route_from_osrm(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_func_create_route_from_osrm(
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_fn_func_create_valhalla_request_generator(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_func_create_valhalla_request_generator(
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi_jsi::Bridging<void *>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::cpp_uniffi_ferrostar_fn_func_get_route_polyline(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_func_get_route_polyline(
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[1]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_fn_func_location_simulation_from_coordinates(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_func_location_simulation_from_coordinates(
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_fn_func_location_simulation_from_polyline(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_func_location_simulation_from_polyline(
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi_jsi::Bridging<uint32_t>::fromJs(rt, callInvoker, args[1]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_fn_func_location_simulation_from_route(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  RustCallStatus status =
      uniffi::ferrostar::Bridging<RustCallStatus>::rustSuccess(rt);
  auto value = uniffi_ferrostar_fn_func_location_simulation_from_route(
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]),
      uniffi::ferrostar::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]),
      &status);
  uniffi::ferrostar::Bridging<RustCallStatus>::copyIntoJs(
      rt, callInvoker, status, args[count - 1]);

  return uniffi::ferrostar::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_checksum_func_advance_location_simulation(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_ferrostar_checksum_func_advance_location_simulation();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_checksum_func_create_ferrostar_logger(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_ferrostar_checksum_func_create_ferrostar_logger();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_checksum_func_create_osrm_response_parser(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_ferrostar_checksum_func_create_osrm_response_parser();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_checksum_func_create_route_from_osrm(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_ferrostar_checksum_func_create_route_from_osrm();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_func_create_valhalla_request_generator(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_ferrostar_checksum_func_create_valhalla_request_generator();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_checksum_func_get_route_polyline(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_ferrostar_checksum_func_get_route_polyline();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_func_location_simulation_from_coordinates(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_ferrostar_checksum_func_location_simulation_from_coordinates();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_func_location_simulation_from_polyline(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_ferrostar_checksum_func_location_simulation_from_polyline();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_func_location_simulation_from_route(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_ferrostar_checksum_func_location_simulation_from_route();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_method_navigationcontroller_advance_to_next_step(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_ferrostar_checksum_method_navigationcontroller_advance_to_next_step();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_method_navigationcontroller_get_initial_state(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_ferrostar_checksum_method_navigationcontroller_get_initial_state();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_method_navigationcontroller_update_user_location(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_ferrostar_checksum_method_navigationcontroller_update_user_location();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_method_routeadapter_generate_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_ferrostar_checksum_method_routeadapter_generate_request();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_method_routeadapter_parse_response(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_ferrostar_checksum_method_routeadapter_parse_response();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_method_routedeviationdetector_check_route_deviation(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_ferrostar_checksum_method_routedeviationdetector_check_route_deviation();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_method_routerequestgenerator_generate_request(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_ferrostar_checksum_method_routerequestgenerator_generate_request();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_method_routeresponseparser_parse_response(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_ferrostar_checksum_method_routeresponseparser_parse_response();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_constructor_navigationcontroller_new(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value = uniffi_ferrostar_checksum_constructor_navigationcontroller_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value
NativeFerrostar::cpp_uniffi_ferrostar_checksum_constructor_routeadapter_new(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = uniffi_ferrostar_checksum_constructor_routeadapter_new();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_checksum_constructor_routeadapter_new_valhalla_http(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  auto value =
      uniffi_ferrostar_checksum_constructor_routeadapter_new_valhalla_http();

  return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::cpp_ffi_ferrostar_uniffi_contract_version(
    jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
    size_t count) {
  auto value = ffi_ferrostar_uniffi_contract_version();

  return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_fn_init_callback_vtable_routedeviationdetector(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  static UniffiVTableCallbackInterfaceRouteDeviationDetector vtableInstance =
      uniffi::ferrostar::
          Bridging<UniffiVTableCallbackInterfaceRouteDeviationDetector>::fromJs(
              rt, callInvoker, args[0]);
  uniffi_ferrostar_fn_init_callback_vtable_routedeviationdetector(
      &vtableInstance);
  return jsi::Value::undefined();
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_fn_init_callback_vtable_routerequestgenerator(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  static UniffiVTableCallbackInterfaceRouteRequestGenerator vtableInstance =
      uniffi::ferrostar::
          Bridging<UniffiVTableCallbackInterfaceRouteRequestGenerator>::fromJs(
              rt, callInvoker, args[0]);
  uniffi_ferrostar_fn_init_callback_vtable_routerequestgenerator(
      &vtableInstance);
  return jsi::Value::undefined();
}
jsi::Value NativeFerrostar::
    cpp_uniffi_ferrostar_fn_init_callback_vtable_routeresponseparser(
        jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args,
        size_t count) {
  static UniffiVTableCallbackInterfaceRouteResponseParser vtableInstance =
      uniffi::ferrostar::Bridging<
          UniffiVTableCallbackInterfaceRouteResponseParser>::fromJs(rt,
                                                                    callInvoker,
                                                                    args[0]);
  uniffi_ferrostar_fn_init_callback_vtable_routeresponseparser(&vtableInstance);
  return jsi::Value::undefined();
}